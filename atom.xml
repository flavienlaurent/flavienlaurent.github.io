<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Flavien Laurent]]></title>
  <link href="http://flavienlaurent.com/atom.xml" rel="self"/>
  <link href="http://flavienlaurent.com/"/>
  <updated>2015-01-08T15:43:53+01:00</updated>
  <id>http://flavienlaurent.com/</id>
  <author>
    <name><![CDATA[Flavien Laurent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Screenshots Through Automation]]></title>
    <link href="http://flavienlaurent.com/blog/2014/12/05/screenshot_automation/"/>
    <updated>2014-12-05T21:51:00+01:00</updated>
    <id>http://flavienlaurent.com/blog/2014/12/05/screenshot_automation</id>
    <content type="html"><![CDATA[<p>One important thing when an app is released on the Play Store is to have up-to-date, beautiful and clean screenshots. In an app containing lots of screens, it can be painful to manually take screenshots for each release. This article describes an approach at pushing automation into the screenshot process in order to more easily achieve this.</p>

<!-- more -->


<p>Just arrived at <a href="https://www.capitainetrain.com">Capitaine Train</a>, I was asked to find a way to automatically take screenshots because we had a lot of them: 3 form factors, 4 languages, 6 screenshots = 72 screenshots. This article explains the solution we used to achieve this. 3 important parts are necessary to take screenshots like a robot: <strong>uiautomator</strong>, <strong>accessibility</strong> and <strong>bash scripting</strong>.</p>

<h1>Hands on uiautomator</h1>

<p>uiautomator is a framework used to manipulate the UI from some code encapsulated into a JUnit test case. One important thing to know is that those test cases are executed in a side process: <strong>they are not contained inside the tested app</strong>. You can see the uiautomator framework as an independent robot which is able to do some actions on a device like touch, scroll, take a screenshot etc.</p>

<p><strong>The basics</strong></p>

<p>Before continuing, the <a href="https://developer.android.com/tools/help/uiautomator">official documentation</a> is a good starting point. I highly encourage you to take some times to read it.</p>

<p>The API is very simple. There are 3 classes that represents 3 types of UI element:</p>

<ul>
<li><code>UiObject</code>: a basic UI element such as <code>TextView</code></li>
<li><code>UiCollection</code>: a UI element that contains several <code>UiObject</code> such as <code>LinearLayout</code></li>
<li><code>UiScrollable</code>: a UI element that contains several <code>UiObject</code> and that can be scrolled such as <code>ListView</code></li>
</ul>


<p><img src="http://flavienlaurent.com/media/2014-12-05-screenshot_automation/uml.png"></p>

<p>There are 2 other classes you must know:</p>

<ul>
<li><code>UiDevice</code> to perform device-level actions like pressing the back button, taking a screenshot etc</li>
<li><code>UiSelector</code> to request UI elements on a screen by id, type etc</li>
</ul>


<p>Finally, the most important class is <code>UiAutomatorTestCase</code> which is the class to extend from in order to create an uiautomator test case.</p>

<p>You can check out some examples to be more familiar with uiautomator on the <a href="https://developer.android.com/tools/testing/testing_ui.html">official documentation</a>.</p>

<p><strong>Setup, build and run</strong></p>

<p>The next step to use uiautomator is to build it but at this time, there is no official Gradle integration of uiautomator module so you have to deal with it on your own. The final output of uiautomator test cases is single JAR so here is a simple setup.</p>

<ul>
<li>Create a new <code>java</code> Gradle module in your existing project and use the same <code>android.jar</code> dependency as in the entire project using <code>local.properties</code>.</li>
</ul>


<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">java</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Properties</span><span class="o">()</span>
</span><span class='line'><span class="n">props</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="n">file</span><span class="o">(</span><span class="s">&quot;../local.properties&quot;</span><span class="o">)))</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="n">props</span><span class="o">[</span><span class="err">&#39;</span><span class="n">sdk</span><span class="o">.</span><span class="na">dir</span><span class="err">&#39;</span><span class="o">]</span> <span class="o">+</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">platforms</span><span class="o">/</span><span class="err">&#39;</span> <span class="o">+</span> <span class="n">androidSdkTarget</span><span class="o">,</span> <span class="nl">include:</span> <span class="err">&#39;</span><span class="o">*.</span><span class="na">jar</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new ant build file using <code>local.properties</code> and <code>gradle.properties</code> to have the same configuration (target, sdk path) as the whole project</li>
</ul>


<figure class='code'><figcaption><span>build.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">name=</span><span class="s">&quot;uiautomator&quot;</span> <span class="na">default=</span><span class="s">&quot;help&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;loadproperties</span> <span class="na">srcFile=</span><span class="s">&quot;../local.properties&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;loadproperties</span> <span class="na">srcFile=</span><span class="s">&quot;gradle.properties&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;target&quot;</span> <span class="na">value=</span><span class="s">&quot;${androidSdkTarget}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;import</span> <span class="na">file=</span><span class="s">&quot;${sdk.dir}/tools/ant/uibuild.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Build the JAR using ant (don&rsquo;t use Gradle), push it on the device and run your test case</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ant build
</span><span class='line'><span class="nv">$ </span>adb push uiautomator.jar data/local/tmp
</span><span class='line'><span class="nv">$ </span>adb shell uiautomator runtest uiautomator.jar -c com.your.TestCase
</span></code></pre></td></tr></table></div></figure>


<p><strong>Walking through the Settings app</strong></p>

<p>Now, I&rsquo;m going to explain how to navigate and change items (in particular, switching from one language to another) in the Settings. First, it&rsquo;s a good way to practice uiautomator. Secondly, it&rsquo;s one of the keys to automate things. <em>Keep in mind that it&rsquo;s one way to do it but it&rsquo;s not the only one and it works on a real device in English(US) with Lollipop 5.0.0</em></p>

<ul>
<li>Open quick settings</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mUiDevice</span><span class="o">.</span><span class="na">openQuickSettings</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Click the settings button to open Settings apps</li>
</ul>


<p><img src="http://flavienlaurent.com/media/2014-12-05-screenshot_automation/settings_button.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">UiObject</span><span class="o">(</span><span class="k">new</span> <span class="nf">UiSelector</span><span class="o">().</span><span class="na">resourceId</span><span class="o">(</span><span class="s">&quot;com.android.systemui:id/settings_button&quot;</span><span class="o">)).</span><span class="na">click</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>As there is not any usable view ids in the Settings app, we have to find and click the language item by text. Hence, we scroll to the item (a <code>FrameLayout</code>) and click on it.</li>
</ul>


<p><img src="http://flavienlaurent.com/media/2014-12-05-screenshot_automation/settings_app.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">UiScrollable</span> <span class="n">scrollable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UiScrollable</span><span class="o">(</span><span class="k">new</span> <span class="nf">UiSelector</span><span class="o">().</span><span class="na">resourceId</span><span class="o">(</span><span class="s">&quot;com.android.settings:id/dashboard&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">scrollable</span><span class="o">.</span><span class="na">getChildByText</span><span class="o">(</span><span class="k">new</span> <span class="nf">UiSelector</span><span class="o">().</span><span class="na">className</span><span class="o">(</span><span class="n">FrameLayout</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="s">&quot;Language &amp; input&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">).</span><span class="na">click</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The exact same &ldquo;find and click&rdquo; principle is used on the &ldquo;Language&rdquo; item (a <code>LinearLayout</code>) contained in a <code>ListView</code></li>
</ul>


<p><img src="http://flavienlaurent.com/media/2014-12-05-screenshot_automation/settings_language.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">UiScrollable</span> <span class="n">scrollable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UiScrollable</span><span class="o">(</span><span class="k">new</span> <span class="nf">UiSelector</span><span class="o">().</span><span class="na">className</span><span class="o">(</span><span class="n">ListView</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'><span class="n">scrollable</span><span class="o">.</span><span class="na">getChildByText</span><span class="o">(</span><span class="k">new</span> <span class="nf">UiSelector</span><span class="o">().</span><span class="na">className</span><span class="o">(</span><span class="n">LinearLayout</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="s">&quot;Language&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">).</span><span class="na">click</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Finally, the target language is chosen</li>
</ul>


<p><img src="http://flavienlaurent.com/media/2014-12-05-screenshot_automation/settings_language_selection.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">UiScrollable</span> <span class="n">scrollable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UiScrollable</span><span class="o">(</span><span class="k">new</span> <span class="nf">UiSelector</span><span class="o">().</span><span class="na">className</span><span class="o">(</span><span class="n">ListView</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'><span class="n">scrollable</span><span class="o">.</span><span class="na">getChildByText</span><span class="o">(</span><span class="k">new</span> <span class="nf">UiSelector</span><span class="o">().</span><span class="na">className</span><span class="o">(</span><span class="n">LinearLayout</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="s">&quot;Français (France)&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">).</span><span class="na">click</span><span class="o">();</span>
</span><span class='line'><span class="n">Locale</span><span class="o">.</span><span class="na">setDefault</span><span class="o">(</span><span class="k">new</span> <span class="nf">Locale</span><span class="o">(</span><span class="s">&quot;fr&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>You need to force the new locale to avoid the uiautomator process to keep a cache of some translations.</em></p>

<p><strong>A few tips</strong></p>

<ul>
<li><p><strong>DEACTIVATE ALL ANIMATIONS</strong> on the device when you&rsquo;re using uiautomator to ensure stability (you can do it via <em>Settings > Developer options > Window animation|Transition animation|Animator duration scale</em>)</p></li>
<li><p>Use <a href="https://developer.android.com/reference/android/util/Log.html">android.util.Log</a> if you want to log stuff; they appear in logcat so use a specific tag for filtering</p></li>
<li><p>Use <code>uiautomatorviewer</code> every time to dig into the view hierarchy. It will help you to build more accurate selector to target UI elements (the <code>uiautomatorviewer</code> is located in <code>sdk/tools/uiautomatorviewer</code>)</p></li>
<li><p>Remember uiautomator test cases are not Android test cases so you have not any <code>Context</code> to play with</p></li>
<li><p>Note that you can&rsquo;t access to your app classes, you can only reference the Android framework classes</p></li>
<li><p>You can pass parameter from the uiautomator command line to the test case class using <code>-e key value</code> in command line and <a href="https://developer.android.com/tools/help/uiautomator/UiAutomatorTestCase.html"><code>UiAutomatorTestCase.html#getParams()</code></a> in the test case classe.</p></li>
</ul>


<p>Switch from one language to another in the same test case without any manual human interaction is simple, isn&rsquo;t it !? uiautomator is a great tool but it doesn&rsquo;t help much if your app is not accessible enough. Sometimes, it is required to create completely custom views and problems may arise.</p>

<h1>Making a custom view accessible</h1>

<p>Accessibility is an important feature for an app for two main reasons. First, some people requires it (too many developers unfortunately forget it). Secondly, all of the uiautomator tooling is based on accessibility.</p>

<p>When developing on Android, you most of the time have nothing in particular to make your app accessible. Indeed, standard framework components like <code>TextView</code>, <code>ListView</code>, etc. already deal with accessibility. However, there are some certain cases where you have to do a little more work. This is mainly when using custom views.</p>

<p>In the <a href="https://www.capitainetrain.com">Capitaine Train</a> app, we built a custom view when designing the calendar. It is based on a <code>ListView</code> filled with several custom views each of them representing a month (<code>MonthView</code>). A <code>MonthView</code> is a pure <code>View</code> i.e. it directly extends from <code>View</code> and have no children. As a consequence, everything (days, selector, etc.) is drawn manually in the <code>onDraw(Canvas)</code> method. Because of it, <code>MonthView</code> is not accessible at all by default and so is the whole calendar.</p>

<p>The first thing to do is really simple. It consists of setting a content description for each month using the <a href="https://developer.android.com/reference/android/view/View.html#setContentDescription">View#setContentDescription</a> method. It will help us scroll the <code>ListView</code> to a particular month.</p>

<p>Then, once the <code>ListView</code> is positioned on a given month, we want to be able to touch a precise day. In order to do that, we need to make the <code>MonthView</code> content accessible. The Android support library offers a useful helper in that matter: <a href="https://developer.android.com/reference/android/support/v4/widget/ExploreByTouchHelper.html">ExploreByTouchHelper</a>.
As a <code>MonthView</code> is not a tree of views, the technique involves creating a fake logical tree of views based on touch responsiveness.</p>

<p><strong>Implement <code>ExploreByTouchHelper</code> for your custom view</strong></p>

<p>There are 4 methods to implement:</p>

<ul>
<li><code>getVirtualViewAt(float x, float y)</code></li>
</ul>


<p>Return the virtual view id at this <code>x</code> and <code>y</code> or <code>ExploreByTouchHelper.INVALID_ID</code> if there is no virtual view</p>

<ul>
<li><code>getVisibleVirtualViews(List&lt;Integer&gt; virtualViewIds)</code></li>
</ul>


<p>Fill the <code>virtualViewIds</code> with all virtual view ids in the custom view</p>

<ul>
<li><code>onPopulateEventForVirtualView(int virtualViewId, AccessibilityEvent event)</code></li>
</ul>


<p>Fill the accessibility even with virtual view information such as text or content description</p>

<ul>
<li><code>onPopulateNodeForVirtualView(int virtualViewId, AccessibilityNodeInfo node)</code></li>
</ul>


<p>Fill the accessibility node with the virtual view id informations such as text, content description, class name, bounds in parent. If there are possible interactions with this virtual view, you have to specify it on the accessibility node.</p>

<ul>
<li><code>onPerformActionForVirtualView(int virtualViewId, int action, Bundle arguments)</code></li>
</ul>


<p>Perform an action (specified in the previous method) on virtual view</p>

<p>How to make <code>ExploreByTouchHelper</code> implementation easier:</p>

<ul>
<li>create a <code>VirtualView</code> class to maintain virtual view informations such as id, text, content description, bounds in parent.</li>
<li>use a list of <code>VirtualView</code> in your custom view. Initialize it as soon as possible and update virtual views on drawing pass</li>
</ul>


<figure class='code'><figcaption><span>YourAccessibilityTouchHelper.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">YourAccessibilityTouchHelper</span> <span class="kd">extends</span> <span class="n">ExploreByTouchHelper</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">YourAccessibilityTouchHelper</span><span class="o">(</span><span class="n">View</span> <span class="n">forView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">forView</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">int</span> <span class="nf">getVirtualViewAt</span><span class="o">(</span><span class="kt">float</span> <span class="n">x</span><span class="o">,</span> <span class="kt">float</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">VirtualView</span> <span class="n">vw</span> <span class="o">=</span> <span class="n">findVirtualViewByPosition</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">vw</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ExploreByTouchHelper</span><span class="o">.</span><span class="na">INVALID_ID</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">vw</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">getVisibleVirtualViews</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">virtualViewIds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mVirtualViews</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mVirtualViews</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mVirtualViews</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">id</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPopulateEventForVirtualView</span><span class="o">(</span><span class="kt">int</span> <span class="n">virtualViewId</span><span class="o">,</span> <span class="n">AccessibilityEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">VirtualDayView</span> <span class="n">vw</span> <span class="o">=</span> <span class="n">findVirtualViewById</span><span class="o">(</span><span class="n">virtualViewId</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">vw</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">event</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">vw</span><span class="o">.</span><span class="na">description</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPopulateNodeForVirtualView</span><span class="o">(</span><span class="kt">int</span> <span class="n">virtualViewId</span><span class="o">,</span> <span class="n">AccessibilityNodeInfoCompat</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">VirtualDayView</span> <span class="n">vw</span> <span class="o">=</span> <span class="n">findVirtualViewById</span><span class="o">(</span><span class="n">virtualViewId</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">vw</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">vw</span><span class="o">.</span><span class="na">text</span><span class="o">));</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">setContentDescription</span><span class="o">(</span><span class="n">vw</span><span class="o">.</span><span class="na">description</span><span class="o">);</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">setClassName</span><span class="o">(</span><span class="n">vw</span><span class="o">.</span><span class="na">className</span><span class="o">);</span>
</span><span class='line'>        <span class="n">node</span><span class="o">.</span><span class="na">setBoundsInParent</span><span class="o">(</span><span class="n">vw</span><span class="o">.</span><span class="na">boundsInParent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Use the helper in your custom view</strong></p>

<ul>
<li>implement <code>dispatchHoverEvent(MotionEvent event)</code> to activate touch exploration</li>
<li>we need <code>setAccessibilityDelegate()</code> method to re-set the delegate after each <code>ListView.getView</code> because of <a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/widget/AbsListView.java#6780">this</a> <em>(If your custom view is not used in a <code>ListView</code> just set the delegate in the constructor)</em></li>
</ul>


<figure class='code'><figcaption><span>YourCustomView.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">YourCustomView</span> <span class="kd">extends</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">YourAccessibilityTouchHelper</span> <span class="n">mTouchHelper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">YourCustomView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyle</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mTouchHelper</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">YourAccessibilityTouchHelper</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setAccessibilityDelegate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">setAccessibilityDelegate</span><span class="o">(</span><span class="n">mTouchHelper</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dispatchHoverEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mTouchHelper</span><span class="o">.</span><span class="na">dispatchHoverEvent</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">dispatchHoverEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Use <code>uiautmatorviewer</code> to check your implementation</strong></p>

<p>If everything is ok, when your take a screenshot using the <code>uiautmatorviewer</code> tool, you should see the fake hierarchy of views with all of the provided informations set in accessibility nodes.</p>

<p><img src="http://flavienlaurent.com/media/2014-12-05-screenshot_automation/accessibility_calendar_uiautomator.png"></p>

<!-- NOTE : Ça change quelque chose ? On s'en fout du class name en vrai ? Ça compte pas dans l'accessibilité non ? -->


<p>On a side note, I just found a problem in Capitaine Train&rsquo;s app while writing this blog post. The class name on each virtual view is <code>com.capitainetrain.x</code> because we forgot Proguard :)</p>

<p>Now, all of the app is accessible and, as a direct consequence, uiautomator usable, let&rsquo;s automatically take some beautiful screenshots like a boss.</p>

<h1>Taking beautiful screenshots</h1>

<p>The final part of this article explains how to push uiautomator to the next level to take polished screenshots of your app in multiple languages. It consists in 2 steps: first, use bash scripting to run your uiautomator screenshot test case as many times as you want and polish those screenshots using imagemagick.</p>

<p>First thing to do is to build and push the uiautomator JAR, and then run the test case. As you know how to switch from one language to another inside a test case, you can pass 2 arguments to the test case: the current language to go through the Settings app and the new target language to switch on.</p>

<figure class='code'><figcaption><span>screenshot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Build and push the uiautomator JAR</span>
</span><span class='line'>ant build
</span><span class='line'>adb push bin/uiautomator.jar data/local/tmp
</span><span class='line'>
</span><span class='line'>adb shell uiautomator runtest uiautomator.jar
</span><span class='line'>  -e current_language <span class="k">${</span><span class="nv">currentLanguage</span><span class="k">}</span>
</span><span class='line'>  -e new_language <span class="k">${</span><span class="nv">newLanguage</span><span class="k">}</span>
</span><span class='line'>  -c com.your.TestCase
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say we have a simple test case which switches language, opens an app and takes a screenshot.</p>

<figure class='code'><figcaption><span>TestCase.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestCase</span> <span class="kd">extends</span> <span class="n">UiAutomatorTestCase</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">[...]</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">setUp</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Bundle</span> <span class="n">params</span> <span class="o">=</span> <span class="n">getParams</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mCurrentLanguage</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;current_language&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mNewLanguage</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;new_language&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">switchLanguage</span><span class="o">(</span><span class="n">mCurrentLanguage</span><span class="o">,</span> <span class="n">mNewLanguage</span><span class="o">);</span>
</span><span class='line'>        <span class="n">openApp</span><span class="o">();</span>
</span><span class='line'>        <span class="n">takeScreenshot</span><span class="o">(</span><span class="s">&quot;data/local/tmp/screenshots&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>switchLanguage(String,String)</code> can be easily implemented using the method I explained in the &ldquo;Hands on uiautomator&rdquo; part.</p></li>
<li><p><code>openApp()</code> is explained <a href="https://developer.android.com/tools/testing/testing_ui.html#sample">here</a></p></li>
<li><p><code>takeScreenshot()</code> uses <code>UiDevice#takeScreenshot</code>. <strong>Just a small tip: if an app contains scrollable parts, we have to wait for a short period time (with <code>UiAutomatorTestCase.sleep</code> or <code>SystemClock.sleep</code>) until scrollbars disappear else they will be visible on your final screenshots.</strong></p></li>
</ul>


<p>Now screenshots are stored on the device, we only need to pull them.</p>

<figure class='code'><figcaption><span>screenshot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir screenshots
</span><span class='line'>adb pull data/local/tmp/screenshots screenshots
</span></code></pre></td></tr></table></div></figure>


<p>Run the test case on multiple languages. It starts from a given current language of the device because there is not a proper way to get it programmatically and then it runs the test case for each language.</p>

<figure class='code'><figcaption><span>screenshot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>screenshot<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">currentLanguage</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>  <span class="nv">newLanguage</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>  adb shell uiautomator runtest uiautomator.jar
</span><span class='line'>      -e current_language <span class="k">${</span><span class="nv">currentLanguage</span><span class="k">}</span>
</span><span class='line'>      -e new_language <span class="k">${</span><span class="nv">newLanguage</span><span class="k">}</span>
</span><span class='line'>      -c com.your.TestCase
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>screenshot <span class="nv">$deviceLanguage</span> fr
</span><span class='line'>screenshot fr en
</span><span class='line'>screenshot en de
</span></code></pre></td></tr></table></div></figure>


<p>The app can be uninstalled/installed for each uiautomator test case run to start the test in the same conditions (i.e. from scratch) every time.</p>

<figure class='code'><figcaption><span>screenshot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>screenshot<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">currentLanguage</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>  <span class="nv">newLanguage</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Uninstall/Install the app</span>
</span><span class='line'>  adb uninstall com.your.app
</span><span class='line'>  adb install ../app/build/outputs/apk/yourapp-release.apk
</span><span class='line'>  
</span><span class='line'>  adb shell uiautomator runtest uiautomator.jar
</span><span class='line'>      -e current_language <span class="k">${</span><span class="nv">currentLanguage</span><span class="k">}</span>
</span><span class='line'>      -e new_language <span class="k">${</span><span class="nv">newLanguage</span><span class="k">}</span>
</span><span class='line'>      -c com.your.TestCase
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, all things together.</p>

<figure class='code'><figcaption><span>screenshot.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>screenshot<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">currentLanguage</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>  <span class="nv">newLanguage</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Uninstall/Install the app</span>
</span><span class='line'>  adb uninstall com.your.app
</span><span class='line'>  adb install ../app/build/outputs/apk/yourapp-release.apk
</span><span class='line'>
</span><span class='line'>  <span class="c"># Run the test case</span>
</span><span class='line'>  adb shell uiautomator runtest uiautomator.jar
</span><span class='line'>      -e current_language <span class="k">${</span><span class="nv">currentLanguage</span><span class="k">}</span>
</span><span class='line'>      -e new_language <span class="k">${</span><span class="nv">newLanguage</span><span class="k">}</span>
</span><span class='line'>      -c com.your.TestCase
</span><span class='line'>      
</span><span class='line'>  mkdir screenshots
</span><span class='line'>  adb pull data/local/tmp/screenshots screenshots
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Build and push the uiautomator JAR</span>
</span><span class='line'>ant build
</span><span class='line'>adb push bin/uiautomator.jar data/local/tmp
</span><span class='line'>
</span><span class='line'><span class="c"># Build the APK</span>
</span><span class='line'><span class="nb">cd</span> .. <span class="o">&amp;&amp;</span> ./gradlew assembleRelease <span class="o">&amp;&amp;</span> <span class="nb">cd </span>uiautomator
</span><span class='line'>
</span><span class='line'><span class="c"># Screenshot everything</span>
</span><span class='line'>screenshot <span class="nv">$currentLanguage</span> fr
</span><span class='line'>screenshot fr en
</span><span class='line'>screenshot en de
</span></code></pre></td></tr></table></div></figure>


<p><strong>Screenshot polishing</strong></p>

<p>Good read: <a href="http://cyrilmottier.com/2012/07/11/creating-professional-looking-screenshots/">Creating professional looking screenshots</a></p>

<p>Your app screenshots must be as polished as possible because it&rsquo;s the first thing the user look at on the Play Store. Most of the time, the user doesn&rsquo;t read an app description but goes straight to your app&rsquo;s screenshots. There is no need to say the best the screenshot experience is, the better. A great way to ensure this is to follow some simple rules:</p>

<ul>
<li>Always have a clean status bar</li>
<li>Remove navigation bar</li>
<li>Bundle several screen sizes: 5, 7, 9|10</li>
</ul>


<p>The 2 first points can be easily achieved with an amazing tool called: <em>imagemagick</em>. The <a href="http://www.imagemagick.org/script/command-line-tools.php">official documentation</a> is very large so we are going to focus on 2 features: <em>composite</em> and <em>convert</em>.</p>

<p><strong>Clean the status bar with <em>composite</em></strong></p>

<p><em>composite</em> is used to overlap one image over another. It&rsquo;s perfect to put a clean status bar on top of a screenshot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>composite -quality <span class="m">100</span> -compose atop clean_status_bar.png screenshot.png clean_screenshot.png
</span></code></pre></td></tr></table></div></figure>


<p><strong>Crop the navigation bar with <em>convert</em></strong></p>

<p><em>convert</em> is used to convert between image formats as well as crop an image. It&rsquo;s perfect to remove the navigation bar on bottom of a screenshot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>convert -quality <span class="m">100</span> screenshot.png -gravity South -chop 0x144 clean_screenshot.png
</span></code></pre></td></tr></table></div></figure>


<p><em>144 is the size in px of the navigation bar on a Nexus 5.</em></p>

<h1>Conclusion</h1>

<p>Since the introduction of this new automatic screenshot tooling at Capitaine Train, 20~30min were spend on taking screenshots while it was sometimes taking us half a day or almost a day before (i.e. nobody wanted to do that and screenshots were almost never updated). The save in time is clearly huge and significant and clearly worth the time spent at developing the tool. In addition to that, it is less error-prone and less painful.</p>

<p>Some of the possible next steps are:</p>

<ul>
<li>Use the <a href="https://developers.google.com/android-publisher/#publishing">Google Play Publishing API</a> to easily upload the generated screenshots</li>
<li>Integrate this tool into Jenkins to take screenshots on each release build</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spans, a Powerful Concept.]]></title>
    <link href="http://flavienlaurent.com/blog/2014/01/31/spans/"/>
    <updated>2014-01-31T18:09:00+01:00</updated>
    <id>http://flavienlaurent.com/blog/2014/01/31/spans</id>
    <content type="html"><![CDATA[<p>Recently, I wrote a blog post about the NewStand app and its ActionBar icon translation effect. <a href="http://cyrilmottier.com">Cyril Mottier</a> suggested me to use Spans to fade in/out the ActionBar title which is a very elegant solution.</p>

<p>Moreover, I always wanted to try all available types of Span: ImageSpan, BackgroundColorSpan etc. They are very usefull and simple to use but there is not any documentation and details about them.</p>

<!-- more -->


<p>So, in this article, I&rsquo;m going to explore what can be done with Spans of the framework and then, I will show you how to push Spans to the next level.</p>

<p>You can download &amp; install <a href="https://github.com/flavienlaurent/spans/raw/master/sample.apk">the sample application</a>.
Checkout the <a href="https://github.com/flavienlaurent/spans">source</a>.</p>

<h1>In the framework</h1>

<h2>Hierarchy</h2>

<p>Main rules:</p>

<ul>
<li>if a Span affects character-level text formatting, it extends <a href="http://developer.android.com/reference/android/text/style/CharacterStyle.html">CharacterStyle</a>.</li>
<li>if a Span affects paragraph-level text formatting, it implements <a href="http://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a></li>
<li>if a Span modifies the character-level text appearance, it implements <a href="http://developer.android.com/reference/android/text/style/UpdateAppearance.html">UpdateAppearance</a></li>
<li>if a Span modifies the character-level text metrics|size, it implements <a href="http://developer.android.com/reference/android/text/style/UpdateLayout.html">UpdateLayout</a></li>
</ul>


<p>It gives us beautiful class diagrams like this.</p>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/cdcharacterstyle.png"></p>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/cdparagraphstyle.png"></p>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/cdupdateappearance.png"></p>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/cdupdatelayout.png"></p>

<p>As it&rsquo;s a bit complicated so I advise you to use a class visualizer (like <a href="http://www.class-visualizer.net">this</a>) to fully understand the hierarchy.</p>

<h1>How it works?</h1>

<h2>Layout</h2>

<p>When you set text on a TextView, it uses the base class <a href="http://developer.android.com/reference/android/text/Layout.html">Layout</a> to manage text rendering.</p>

<p>The Layout class contains a boolean <code>mSpannedText</code>: true when the text is an instance of <a href="http://developer.android.com/reference/android/text/Spanned.html">Spanned</a> (<a href="http://developer.android.com/reference/android/text/SpannableString.html">SpannableString</a> implements <a href="http://developer.android.com/reference/android/text/Spanned.html">Spanned</a>). This class only processes <a href="http://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a> Spans.</p>

<p>The <a href="http://developer.android.com/reference/android/text/Layout.html#draw(android.graphics.Canvas,%20android.graphics.Path,%20android.graphics.Paint,%20int)">draw</a> method calls 2 others methods:</p>

<ul>
<li>drawBackground</li>
</ul>


<p>For each line of text, if there is a <a href="http://developer.android.com/reference/android/text/style/LineBackgroundSpan.html">LineBackgroundSpan</a> for a current line, <a href="http://developer.android.com/reference/android/text/style/LineBackgroundSpan.html#drawBackground(android.graphics.Canvas,%20android.graphics.Paint,%20int,%20int,%20int,%20int,%20int,%20java.lang.CharSequence,%20int,%20int,%20int)">LineBackgroundSpan#drawBackground</a> is called.</p>

<ul>
<li>drawText</li>
</ul>


<p>For each line of text, it computes <a href="http://developer.android.com/reference/android/text/style/LeadingMarginSpan.html">LeadingMarginSpan</a> and <a href="http://developer.android.com/reference/android/text/style/LeadingMarginSpan.LeadingMarginSpan2.html">LeadingMarginSpan2</a> and calls <a href="http://developer.android.com/reference/android/text/style/LeadingMarginSpan.html#drawLeadingMargin(android.graphics.Canvas,%20android.graphics.Paint,%20int,%20int,%20int,%20int,%20int,%20java.lang.CharSequence,%20int,%20int,%20boolean,%20android.text.Layout)">LeadingMarginSpan#drawLeadingMargin</a> when it&rsquo;s necessary. This is also where <a href="http://developer.android.com/reference/android/text/style/AlignmentSpan.html">AlignmentSpan</a> is used to determine the text alignment.
Finally, if the current line is spanned, Layout calls TextLine#draw (a TextLine object is created for each line).</p>

<h2>TextLine</h2>

<p><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/text/TextLine.java">android.text.TextLine</a> documentation says: <em>Represents a line of styled text, for measuring in visual order and for rendering</em>.</p>

<p>TextLine class contains 3 sets of Spans:</p>

<ul>
<li>MetricAffectingSpan set</li>
<li>CharacterStyle set</li>
<li>ReplacementSpan set</li>
</ul>


<p>The interesting method is TextLine#handleRun. It&rsquo;s where all Spans are used to render the text. Relative to the type of Span, TextLine calls:</p>

<ul>
<li><a href="">CharacterStyle#updateDrawState</a> to change the TextPaint configuration for MetricAffectingSpan and CharacterStyle Spans.</li>
<li>TextLine#handleReplacement for ReplacementSpan. It calls <a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html#getSize(android.graphics.Paint,%20java.lang.CharSequence,%20int,%20int,%20android.graphics.Paint.FontMetricsInt)">Replacement#getSize</a> to get the replacement width, update the font metrics if it&rsquo;s needed and finally call <a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html#draw(android.graphics.Canvas,%20java.lang.CharSequence,%20int,%20int,%20float,%20int,%20int,%20int,%20android.graphics.Paint)">Replacement#draw</a>.</li>
</ul>


<h2>FontMetrics</h2>

<p>If you want to know more about what is font metrics, just look at the following schema:</p>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/fontmetrics.png"></p>

<h1>Playground</h1>

<h2>BulletSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/BulletSpan.html">android.text.style.BulletSpan</a></p>

<p>The BulletSpan affects paragraph-level text formatting. It allows you to put a bullet on paragraph start.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public BulletSpan (int gapWidth, int color)</span>
</span><span class='line'><span class="cm">-gapWidth: gap in px between bullet and text</span>
</span><span class='line'><span class="cm">-color: bullet color (optionnal, default is transparent)</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//create a black BulletSpan with a gap of 15px</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BulletSpan</span><span class="o">(</span><span class="mi">15</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/bullet.png" width="325" height="200"></p>

<h2>QuoteSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/QuoteSpan.html">android.text.style.QuoteSpan</a></p>

<p>The QuoteSpan affects paragraph-level text formatting. It allows you to put a quote vertical line on a paragraph.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public QuoteSpan (int color)</span>
</span><span class='line'><span class="cm">-color: quote vertical line color (optionnal, default is Color.BLUE)</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//create a red quote</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">QuoteSpan</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/quote.png" width="325" height="200"></p>

<h2>AlignmentSpan.Standard</h2>

<p><a href="http://developer.android.com/reference/android/text/style/AlignmentSpan.Standard.html">android.text.style.AlignmentSpan.Standard</a></p>

<p>The AlignmentSpan.Standard affects paragraph-level text formatting. It allows you to align (normal, center, opposite) a paragraph.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public Standard(Layout.Alignment align)</span>
</span><span class='line'><span class="cm">-align: alignment to set</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//align center a paragraph</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AlignmentSpan</span><span class="o">.</span><span class="na">Standard</span><span class="o">(</span><span class="n">Layout</span><span class="o">.</span><span class="na">Alignment</span><span class="o">.</span><span class="na">ALIGN_CENTER</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/alignmentstandard.png" width="325" height="200"></p>

<h2>UnderlineSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/UnderlineSpan.html">android.text.style.UnderlineSpan</a></p>

<p>The UnderlineSpan affects character-level text formatting. It allows you to underline a character thanks to <a href="http://developer.android.com/reference/android/graphics/Paint.html#setUnderlineText(boolean)">Paint#setUnderlineText(true)</a> .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//underline a character</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UnderlineSpan</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/underline.png" width="325" height="200"></p>

<h2>StrikethroughSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/StrikethroughSpan.html">android.text.style.StrikethroughSpan</a></p>

<p>The StrikethroughSpan affects character-level text formatting. It allows you to strikethrough a character thanks to <a href="http://developer.android.com/reference/android/graphics/Paint.html#setStrikeThruText(boolean">Paint#setStrikeThruText(true)</a>) .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//strikethrough a character</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StrikethroughSpan</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/strikethrough.png" width="325" height="200"></p>

<h2>SubscriptSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/SubscriptSpan.html">android.text.style.SubscriptSpan</a></p>

<p>The SubscriptSpan affects character-level text formatting. It allows you to subscript a character by reducing the <a href="http://developer.android.com/reference/android/text/TextPaint.html#baselineShift">TextPaint#baselineShift</a> .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//subscript a character</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SubscriptSpan</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/subscript.png" width="325" height="200"></p>

<h2>SuperscriptSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/SuperscriptSpan.html">android.text.style.SuperscriptSpan</a></p>

<p>The SuperscriptSpan affects character-level text formatting. It allows you to superscript a character by increasing the <a href="http://developer.android.com/reference/android/text/TextPaint.html#baselineShift">TextPaint#baselineShift</a> .</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//superscript a character</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SuperscriptSpan</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/superscript.png" width="325" height="200"></p>

<h2>BackgroundColorSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/BackgroundColorSpan.html">android.text.style.BackgroundColorSpan</a></p>

<p>The BackgroundColorSpan affects character-level text formatting. It allows you to set a background color on a character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public BackgroundColorSpan (int color)</span>
</span><span class='line'><span class="cm">-color: background color</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set a green background</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BackgroundColorSpan</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/bgcolor.png" width="325" height="200"></p>

<h2>ForegroundColorSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/ForegroundColorSpan.html">android.text.style.ForegroundColorSpan</a></p>

<p>The ForegroundColorSpan affects character-level text formatting. It allows you to set a foreground color on a character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public ForegroundColorSpan (int color)</span>
</span><span class='line'><span class="cm">-color: foreground color</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set a red foreground</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ForegroundColorSpan</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/fgcolor.png" width="325" height="200"></p>

<h2>ImageSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/ImageSpan.html">android.text.style.ImageSpan</a></p>

<p>The ImageSpan affects character-level text formatting. It allows you to a character by an image. It&rsquo;s one of the few span that is well documented so enjoy it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//replace a character by pic1_small image</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ImageSpan</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">pic1_small</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/image.png" width="325" height="260"></p>

<h2>StyleSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/StyleSpan.html">android.text.style.StyleSpan</a></p>

<p>The StyleSpan affects character-level text formatting. It allows you to set a style (bold, italic, normal) on a character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public StyleSpan (int style)</span>
</span><span class='line'><span class="cm">-style: int describing the style (android.graphics.Typeface)</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set a bold+italic style</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StyleSpan</span><span class="o">(</span><span class="n">Typeface</span><span class="o">.</span><span class="na">BOLD</span> <span class="o">|</span> <span class="n">Typeface</span><span class="o">.</span><span class="na">ITALIC</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/style.png" width="325" height="200"></p>

<h2>TypefaceSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/TypefaceSpan.html">android.text.style.TypefaceSpan</a></p>

<p>The TypefaceSpan affects character-level text formatting. It allows you to set a font family (monospace, serif etc) on a character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public TypefaceSpan (String family)</span>
</span><span class='line'><span class="cm">-family: a font family</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set the serif family</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TypefaceSpan</span><span class="o">(</span><span class="s">&quot;serif&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/typeface.png" width="325" height="200"></p>

<h2>TextAppearanceSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/TextAppearanceSpan.html">android.text.style.TextAppearanceSpan</a></p>

<p>The TextAppearanceSpan affects character-level text formatting. It allows you to set a appearance on a character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public  TextAppearanceSpan(Context context, int appearance, int colorList)</span>
</span><span class='line'><span class="cm">-context: a valid context</span>
</span><span class='line'><span class="cm">-appearance: text appearance resource (ex: android.R.style.TextAppearance_Small)</span>
</span><span class='line'><span class="cm">-colorList: a text color resource (ex: android.R.styleable.Theme_textColorPrimary)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">public TextAppearanceSpan(String family, int style, int size, ColorStateList color, ColorStateList linkColor)</span>
</span><span class='line'><span class="cm">-family: a font family</span>
</span><span class='line'><span class="cm">-style: int describing the style (android.graphics.Typeface)</span>
</span><span class='line'><span class="cm">-size: text size</span>
</span><span class='line'><span class="cm">-color: a text color</span>
</span><span class='line'><span class="cm">-linkColor: a link text color</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set the serif family</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TextAppearanceSpan</span><span class="o">(</span><span class="k">this</span><span class="cm">/*a context*/</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">style</span><span class="o">.</span><span class="na">SpecialTextAppearance</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>styles.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;SpecialTextAppearance&quot;</span> <span class="na">parent=</span><span class="s">&quot;@android:style/TextAppearance&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textColor&quot;</span><span class="nt">&gt;</span>@color/color1<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textColorHighlight&quot;</span><span class="nt">&gt;</span>@color/color2<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textColorHint&quot;</span><span class="nt">&gt;</span>@color/color3<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textColorLink&quot;</span><span class="nt">&gt;</span>@color/color4<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textSize&quot;</span><span class="nt">&gt;</span>28sp<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textStyle&quot;</span><span class="nt">&gt;</span>italic<span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/textappearance.png" width="325" height="200"></p>

<h2>AbsoluteSizeSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/AbsoluteSizeSpan.html">android.text.style.AbsoluteSizeSpan</a></p>

<p>The AbsoluteSizeSpan affects character-level text formatting. It allows you to set an absolute text size on a character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public AbsoluteSizeSpan(int size, boolean dip)</span>
</span><span class='line'><span class="cm">-size: a size</span>
</span><span class='line'><span class="cm">-dip: false, size is in px; true, size is in dip (optionnal, default false)</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set text size to 24dp</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AbsoluteSizeSpan</span><span class="o">(</span><span class="mi">24</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/absolutesize.png" width="325" height="200"></p>

<h2>RelativeSizeSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/RelativeSizeSpan.html">android.text.style.RelativeSizeSpan</a></p>

<p>The RelativeSizeSpan affects character-level text formatting. It allows you to set an relative text size on a character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public RelativeSizeSpan(float proportion)</span>
</span><span class='line'><span class="cm">-proportion: a proportion of the actual text size</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//set text size 2 times bigger </span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RelativeSizeSpan</span><span class="o">(</span><span class="mf">2.0f</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/relativesize.png" width="325" height="200"></p>

<h2>ScaleXSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/ScaleXSpan.html">android.text.style.ScaleXSpan</a></p>

<p>The ScaleXSpan affects character-level text formatting. It allows you to scale on x a character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public ScaleXSpan(float proportion)</span>
</span><span class='line'><span class="cm">-proportion: a proportion of actual text scale x</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//scale x 3 times bigger </span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ScaleXSpan</span><span class="o">(</span><span class="mf">3.0f</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/scalex.png" width="325" height="200"></p>

<h2>MaskFilterSpan</h2>

<p><a href="http://developer.android.com/reference/android/text/style/MaskFilterSpan.html">android.text.style.MaskFilterSpan</a></p>

<p>The MaskFilterSpan affects character-level text formatting. It allows you to set a <a href="http://developer.android.com/reference/android/graphics/MaskFilter.html">android.graphics.MaskFilter</a> on a character.</p>

<p><strong>Warning: BlurMaskFilter is not supported with hardware acceleration.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">public MaskFilterSpan(MaskFilter filter)</span>
</span><span class='line'><span class="cm">-filter: a filter to apply</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Blur a character</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MaskFilterSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">BlurMaskFilter</span><span class="o">(</span><span class="n">density</span><span class="o">*</span><span class="mi">2</span><span class="o">,</span> <span class="n">BlurMaskFilter</span><span class="o">.</span><span class="na">Blur</span><span class="o">.</span><span class="na">NORMAL</span><span class="o">));</span>
</span><span class='line'><span class="c1">//Emboss a character</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MaskFilterSpan</span><span class="o">(</span><span class="k">new</span> <span class="nf">EmbossMaskFilter</span><span class="o">(</span><span class="k">new</span> <span class="kt">float</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span> <span class="o">},</span> <span class="mf">0.4f</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mf">3.5f</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>BlurMaskFilter</em></p>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/maskfilterblur.png" width="325" height="200"></p>

<p><em>EmbossMaskFilter with a blue ForegroundColorSpan and a bold StyleSpan</em></p>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/maskfilteremboss.png" width="325" height="200"></p>

<h1>Pushing Spans to the next level</h1>

<h2>Animate the foreground color</h2>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/animateforegroundcolor.gif" width="325" height="200"></p>

<p>ForegroundColorSpan is read-only. It means that you can&rsquo;t change the foreground color after instanciation. So, the first thing to do is to code a MutableForegroundColorSpan.</p>

<figure class='code'><figcaption><span>MutableForegroundColorSpan.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MutableForegroundColorSpan</span> <span class="kd">extends</span> <span class="n">ForegroundColorSpan</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mAlpha</span> <span class="o">=</span> <span class="mi">255</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">mForegroundColor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MutableForegroundColorSpan</span><span class="o">(</span><span class="kt">int</span> <span class="n">alpha</span><span class="o">,</span> <span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mAlpha</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mForegroundColor</span> <span class="o">=</span> <span class="n">color</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MutableForegroundColorSpan</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">src</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mForegroundColor</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mAlpha</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToParcel</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">dest</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">writeToParcel</span><span class="o">(</span><span class="n">dest</span><span class="o">,</span> <span class="n">flags</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dest</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">mForegroundColor</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dest</span><span class="o">.</span><span class="na">writeFloat</span><span class="o">(</span><span class="n">mAlpha</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateDrawState</span><span class="o">(</span><span class="n">TextPaint</span> <span class="n">ds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ds</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">getForegroundColor</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * @param alpha from 0 to 255</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAlpha</span><span class="o">(</span><span class="kt">int</span> <span class="n">alpha</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mAlpha</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setForegroundColor</span><span class="o">(</span><span class="kt">int</span> <span class="n">foregroundColor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mForegroundColor</span> <span class="o">=</span> <span class="n">foregroundColor</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">float</span> <span class="nf">getAlpha</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mAlpha</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getForegroundColor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Color</span><span class="o">.</span><span class="na">argb</span><span class="o">(</span><span class="n">mAlpha</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">red</span><span class="o">(</span><span class="n">mForegroundColor</span><span class="o">),</span> <span class="n">Color</span><span class="o">.</span><span class="na">green</span><span class="o">(</span><span class="n">mForegroundColor</span><span class="o">),</span> <span class="n">Color</span><span class="o">.</span><span class="na">blue</span><span class="o">(</span><span class="n">mForegroundColor</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can change alpha or foreground color on the same instance. But when you set those properties, it doesn&rsquo;t refresh the View: you have to do this manually by re-setting the SpannableString.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MutableForegroundColorSpan</span> <span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MutableForegroundColorSpan</span><span class="o">(</span><span class="mi">255</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span><span class='line'><span class="n">spannableString</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="n">span</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spanned</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
</span><span class='line'><span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">spannableString</span><span class="o">);</span>
</span><span class='line'><span class="c1">//here the text is black and fully opaque</span>
</span><span class='line'><span class="n">span</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="n">span</span><span class="o">.</span><span class="na">setForegroundColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span><span class='line'><span class="c1">//here the text hasn&#39;t changed.</span>
</span><span class='line'><span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">spannableString</span><span class="o">);</span>
</span><span class='line'><span class="c1">//finally, the text is red and translucent</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we want to animate the foreground color. We use a custom <a href="http://developer.android.com/reference/android/util/Property.html">android.util.Property</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Property</span><span class="o">&lt;</span><span class="n">MutableForegroundColorSpan</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY</span> <span class="o">=</span>
</span><span class='line'><span class="k">new</span> <span class="n">Property</span><span class="o">&lt;</span><span class="n">MutableForegroundColorSpan</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;(</span><span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">MutableForegroundColorSpan</span> <span class="n">span</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">span</span><span class="o">.</span><span class="na">setForegroundColor</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">get</span><span class="o">(</span><span class="n">MutableForegroundColorSpan</span> <span class="n">span</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">span</span><span class="o">.</span><span class="na">getForegroundColor</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we animate the custom property with an <a href="http://developer.android.com/reference/android/animation/ObjectAnimator.html">ObjectAnimator</a>. Don&rsquo;t forget to refresh the View on update.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MutableForegroundColorSpan</span> <span class="n">span</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MutableForegroundColorSpan</span><span class="o">(</span><span class="mi">255</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span><span class='line'><span class="n">mSpannableString</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="n">span</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spanned</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
</span><span class='line'><span class="n">ObjectAnimator</span> <span class="n">objectAnimator</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofInt</span><span class="o">(</span><span class="n">span</span><span class="o">,</span> <span class="n">MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span><span class='line'><span class="n">objectAnimator</span><span class="o">.</span><span class="na">setEvaluator</span><span class="o">(</span><span class="k">new</span> <span class="nf">ArgbEvaluator</span><span class="o">());</span>
</span><span class='line'><span class="n">objectAnimator</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//refresh</span>
</span><span class='line'>        <span class="n">mText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">mSpannableString</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">objectAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActionBar &lsquo;fireworks&rsquo;</h2>

<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/animateabfireworks.gif"></p>

<p>The &lsquo;fireworks&rsquo; animation is to make letter fade in randomly. First, cut the text into multiple spans (for example, one span by character) and fade in spans after spans.
Using the previously introduced MutableForegroundColorSpan, we are going to create a special object representing a group of span. And for each call to setAlpha on the group, we randomly set the alpha for each span.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">FireworksSpanGroup</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">float</span> <span class="n">mAlpha</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">MutableForegroundColorSpan</span><span class="o">&gt;</span> <span class="n">mSpans</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">FireworksSpanGroup</span><span class="o">(</span><span class="kt">float</span> <span class="n">alpha</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mAlpha</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mSpans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">MutableForegroundColorSpan</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSpan</span><span class="o">(</span><span class="n">MutableForegroundColorSpan</span> <span class="n">span</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">span</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">mAlpha</span> <span class="o">*</span> <span class="mi">255</span><span class="o">));</span>
</span><span class='line'>            <span class="n">mSpans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">span</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Collections</span><span class="o">.</span><span class="na">shuffle</span><span class="o">(</span><span class="n">mSpans</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAlpha</span><span class="o">(</span><span class="kt">float</span> <span class="n">alpha</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">mSpans</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">total</span> <span class="o">=</span> <span class="mf">1.0f</span> <span class="o">*</span> <span class="n">size</span> <span class="o">*</span> <span class="n">alpha</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">MutableForegroundColorSpan</span> <span class="n">span</span> <span class="o">=</span> <span class="n">mSpans</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">total</span> <span class="o">&gt;=</span> <span class="mf">1.0f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">span</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">total</span> <span class="o">-=</span> <span class="mf">1.0f</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">span</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">total</span> <span class="o">*</span> <span class="mi">255</span><span class="o">));</span>
</span><span class='line'>                    <span class="n">total</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">float</span> <span class="nf">getAlpha</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">mAlpha</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We create a custom property to animate the alpha of a FireworksSpanGroup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Property</span><span class="o">&lt;</span><span class="n">FireworksSpanGroup</span><span class="o">,</span> <span class="n">Float</span><span class="o">&gt;</span> <span class="n">FIREWORKS_GROUP_PROGRESS_PROPERTY</span> <span class="o">=</span>
</span><span class='line'><span class="k">new</span> <span class="n">Property</span><span class="o">&lt;</span><span class="n">FireworksSpanGroup</span><span class="o">,</span> <span class="n">Float</span><span class="o">&gt;(</span><span class="n">Float</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;FIREWORKS_GROUP_PROGRESS_PROPERTY&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">FireworksSpanGroup</span> <span class="n">spanGroup</span><span class="o">,</span> <span class="n">Float</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">spanGroup</span><span class="o">.</span><span class="na">setProgress</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Float</span> <span class="nf">get</span><span class="o">(</span><span class="n">FireworksSpanGroup</span> <span class="n">spanGroup</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">spanGroup</span><span class="o">.</span><span class="na">getProgress</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we create the group and animate it with an ObjectAnimator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">FireworksSpanGroup</span> <span class="n">spanGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FireworksSpanGroup</span><span class="o">();</span>
</span><span class='line'><span class="c1">//init the group with multiple spans</span>
</span><span class='line'><span class="c1">//spanGroup.addSpan(span);</span>
</span><span class='line'><span class="c1">//set spans on the ActionBar spannable title</span>
</span><span class='line'><span class="c1">//mActionBarTitleSpannableString.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span>
</span><span class='line'><span class="n">spanGroup</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'><span class="n">ObjectAnimator</span> <span class="n">objectAnimator</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">spanGroup</span><span class="o">,</span> <span class="n">FIREWORKS_GROUP_PROGRESS_PROPERTY</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">);</span>
</span><span class='line'><span class="n">objectAnimator</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//refresh the ActionBar title</span>
</span><span class='line'>        <span class="n">setTitle</span><span class="o">(</span><span class="n">mActionBarTitleSpannableString</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">objectAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Draw with your own Span</h2>

<p>In this section, we are going to see a way to draw via a custom Span. This opens interesting perspectives for text customization.</p>

<p>First, we have to create a custom Span that extends the abstract class <a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html">ReplacementSpan</a>.</p>

<p><em>If you only want to draw a custom background, you can implements <a href="http://developer.android.com/reference/android/text/style/LineBackgroundSpan.html">LineBackgroundSpan</a> which is at paragraph-level.</em></p>

<p>We have to implement 2 methods:</p>

<ul>
<li><a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html#getSize(android.graphics.Paint,%20java.lang.CharSequence,%20int,%20int,%20android.graphics.Paint.FontMetricsInt)">getSize</a>: this method returns the new with of your replacement.</li>
</ul>


<p><em>text</em>: text managed by the Span</p>

<p><em>start</em>: start index of text</p>

<p><em>end</em>: end index of text</p>

<p><em>fm</em>: font metrics, <strong>can be null</strong></p>

<ul>
<li><a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html#draw(android.graphics.Canvas,%20java.lang.CharSequence,%20int,%20int,%20float,%20int,%20int,%20int,%20android.graphics.Paint)">draw</a>: it&rsquo;s here you can draw with the Canvas.</li>
</ul>


<p><em>x</em>: x-coordinate where to draw the text</p>

<p><em>top</em>: top of the line</p>

<p><em>y</em>: the baseline</p>

<p><em>bottom</em>: bottom of the line</p>

<p>Let&rsquo;s see an example where we draw a blue rectangle around the text.</p>

<figure class='code'><figcaption><span>FrameSpan.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">(</span><span class="n">Paint</span> <span class="n">paint</span><span class="o">,</span> <span class="n">CharSequence</span> <span class="n">text</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="n">Paint</span><span class="o">.</span><span class="na">FontMetricsInt</span> <span class="n">fm</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//return text with relative to the Paint</span>
</span><span class='line'>    <span class="n">mWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">paint</span><span class="o">.</span><span class="na">measureText</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mWidth</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">,</span> <span class="n">CharSequence</span> <span class="n">text</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">float</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bottom</span><span class="o">,</span> <span class="n">Paint</span> <span class="n">paint</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//draw the frame with custom Paint</span>
</span><span class='line'>    <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">top</span><span class="o">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">mWidth</span><span class="o">,</span> <span class="n">bottom</span><span class="o">,</span> <span class="n">mPaint</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/framespan.png" width="325" height="200"></p>

<h2>Bonus</h2>

<p>The Sample app contains some examples of pushing Spans to the next level like:</p>

<ul>
<li>Progressive blur</li>
</ul>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/animateblur.gif" width="325" height="200"></p>

<ul>
<li>Typewriter</li>
</ul>


<p><img src="http://flavienlaurent.com/media/2014-01-31-spans/animatetypewriter.gif" width="325" height="200"></p>

<h1>Conclusion</h1>

<p>Working on this article, I realised Spans are really powerfull and like Drawables, I think they are not used enough. Text is the main content of an application, it&rsquo;s everywhere so don&rsquo;t forget to make it more dynamic and attractive with Spans!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Your ActionBar Not Boring]]></title>
    <link href="http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/"/>
    <updated>2013-11-20T19:47:00+01:00</updated>
    <id>http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring</id>
    <content type="html"><![CDATA[<p>Back in May 2013, everyone has discovered the beautiful action bar effect in the Play Music app (explained by <a href="http://www.cyrilmottier.com/">Cyril Mottier</a> , <a href="http://www.cyrilmottier.com/2013/05/24/pushing-the-actionbar-to-the-next-level/">Pushing the ActionBar to the Next Level</a>). This effect is really a great way to make the ActionBar a reactive part of the UI.</p>

<p>Yesterday, I discovered the new <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.magazines">Newsstand app</a> which introduced a new way to push the ActionBar to the next level. If you open the edition screen, you&rsquo;ll notice the ActionBar is transparent (without icon) and overlaps a large images set (overlaped by the big magazine icon) describing some news. Once you start scrolling down, the big magazine icon is translated and scaled to match the ActionBar icon.</p>

<!-- more -->


<p>Here it&rsquo;s a short demo of the trick</p>

<p><img src="https://raw.github.com/flavienlaurent/NotBoringActionBar/master/graphics/notboringab.gif"></p>

<p>The main advantage is to make the ActionBar real part of the content.</p>

<p>In this article, I&rsquo;m going to explain how to make the whole edition screen (the ActionBar effect and the <a href="http://en.wikipedia.org/wiki/Ken_Burns_effect">Ken Burns</a> animation). I will deep dive into the details of implementing the ActionBar effect. As a bonus, I will explain how to create a view animated with the Ken Burns effect.</p>

<p>You can download &amp; install the sample application.</p>

<p><a href="http://flavienlaurent.com/blog/2013/11/20/making-your-action-bar-not-boring/sample.apk">Download Sample Application</a></p>

<h1>The ActionBar trick</h1>

<h1>Styles</h1>

<p>The first step is to setup styles to:</p>

<ul>
<li>have a transparent ActionBar</li>
<li>enable <a href="http://developer.android.com/training/basics/actionbar/overlaying.html">overlay mode</a></li>
</ul>


<figure class='code'><figcaption><span>styles.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;resources&gt;</span>
</span><span class='line'>    <span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;TransparentTheme&quot;</span> <span class="na">parent=</span><span class="s">&quot;@android:style/Theme.Holo.Light&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:windowBackground&quot;</span><span class="nt">&gt;</span>@null<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:actionBarStyle&quot;</span><span class="nt">&gt;</span>@style/ActionBarStyle.Transparent<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:windowActionBarOverlay&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;ActionBarStyle.Transparent&quot;</span> <span class="na">parent=</span><span class="s">&quot;@android:Widget.ActionBar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:background&quot;</span><span class="nt">&gt;</span>@null<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:displayOptions&quot;</span><span class="nt">&gt;</span>homeAsUp|showHome|showTitle<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:titleTextStyle&quot;</span><span class="nt">&gt;</span>@style/ActionBarStyle.Transparent.TitleTextStyle<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">&quot;ActionBarStyle.Transparent.TitleTextStyle&quot;</span> <span class="na">parent=</span><span class="s">&quot;@android:style/TextAppearance.Holo.Widget.ActionBar.Title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;item</span> <span class="na">name=</span><span class="s">&quot;android:textColor&quot;</span><span class="nt">&gt;</span>@android:color/white<span class="nt">&lt;/item&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Layout structure</h1>

<p>The layout structure is really important. The main layout is a FrameLayout composed by a ListView and another FrameLayout (ie <code>header</code>). The header contains one ImageView (ie <code>header_picture</code>) which is the picture and one ImageView (ie <code>header_logo</code>) which is the icon to be translated &amp; scaled into the ActionBar.</p>

<figure class='code'><figcaption><span>main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;FrameLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ListView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/listview&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;@android:color/white&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;FrameLayout</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/header&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;@dimen/header_height&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;ImageView</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/header_picture&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:src=</span><span class="s">&quot;@drawable/picture0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;ImageView</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/header_logo&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;@dimen/header_logo_size&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;@dimen/header_logo_size&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>            <span class="na">android:src=</span><span class="s">&quot;@drawable/ic_header_logo&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/FrameLayout&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/FrameLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The trick here is to add an fake header view in the ListView. This fake header must have the same height as the real header. You can use a layout xml file to describe the fake header</p>

<figure class='code'><figcaption><span>fake_header.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;@dimen/header_height&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you just have to inflate &amp; add it by code</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mFakeHeader</span> <span class="o">=</span> <span class="n">getLayoutInflater</span><span class="o">().</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fake_header</span><span class="o">,</span> <span class="n">mListView</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">addHeaderView</span><span class="o">(</span><span class="n">mFakeHeader</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Get the scroll position</h1>

<p>I&rsquo;m not going to explain this in details because there is a bunch of StackOverflow, posts etc about it.</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getScrollY</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">c</span> <span class="o">=</span> <span class="n">mListView</span><span class="o">.</span><span class="na">getChildAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">firstVisiblePosition</span> <span class="o">=</span> <span class="n">mListView</span><span class="o">.</span><span class="na">getFirstVisiblePosition</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">headerHeight</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">firstVisiblePosition</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">headerHeight</span> <span class="o">=</span> <span class="n">mPlaceHolderView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="n">top</span> <span class="o">+</span> <span class="n">firstVisiblePosition</span> <span class="o">*</span> <span class="n">c</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">+</span> <span class="n">headerHeight</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that you have to take care of the ListView header height in the calculation if the first visible position is >= 1.</p>

<h1>Translating the header</h1>

<p>On ListView scroll, you have to tranlate the header in order to follow the ListView fake header. Notice that the translation must be bounded to the ActionBar height.</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnScrollListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AbsListView</span><span class="o">.</span><span class="na">OnScrollListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScrollStateChanged</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">scrollState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">scrollY</span> <span class="o">=</span> <span class="n">getScrollY</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">//sticky actionbar</span>
</span><span class='line'>            <span class="n">mHeader</span><span class="o">.</span><span class="na">setTranslationY</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(-</span><span class="n">scrollY</span><span class="o">,</span> <span class="n">mMinHeaderTranslation</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Fading the title</h1>

<p>You need to retrieve the title View to apply a fade effect. This view can be retrieve using the <a href="http://developer.android.com/reference/android/content/res/Resources.html#getIdentifier">Resources.getIdentifier</a> method.</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">TextView</span> <span class="nf">getActionBarTitleView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">getSystem</span><span class="o">().</span><span class="na">getIdentifier</span><span class="o">(</span><span class="s">&quot;action_bar_title&quot;</span><span class="o">,</span> <span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="s">&quot;android&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, just initialize alpha value on this View</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">getActionBarTitleView</span><span class="o">().</span><span class="na">setAlpha</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>On ListView scroll, you have to fade the title depending on the header translation ratio</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnScrollListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AbsListView</span><span class="o">.</span><span class="na">OnScrollListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScrollStateChanged</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">scrollState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">clamp</span><span class="o">(</span><span class="n">mHeader</span><span class="o">.</span><span class="na">getTranslationY</span><span class="o">()</span> <span class="o">/</span> <span class="n">mMinHeaderTranslation</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//actionbar title alpha</span>
</span><span class='line'>            <span class="n">getActionBarTitleView</span><span class="o">().</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">clamp</span><span class="o">(</span><span class="mf">5.0</span><span class="n">F</span> <span class="o">*</span> <span class="n">ratio</span> <span class="o">-</span> <span class="mf">4.0</span><span class="n">F</span><span class="o">,</span> <span class="mf">0.0</span><span class="n">F</span><span class="o">,</span> <span class="mf">1.0</span><span class="n">F</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alpha values: f(x) = 5x-4</p>

<p><img src="http://flavienlaurent.com/media/2013-11-20-making-your-action-bar-not-boring/5xmin4.png" width="325" height="200"></p>

<p>The clamp method is basic Math method (see <a href="http://en.wikipedia.org/wiki/Clamping_(graphics">Wikipedia</a>)</p>

<figure class='code'><figcaption><span>Clamp.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">float</span> <span class="nf">clamp</span><span class="o">(</span><span class="kt">float</span> <span class="n">value</span><span class="o">,</span> <span class="kt">float</span> <span class="n">max</span><span class="o">,</span> <span class="kt">float</span> <span class="n">min</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">min</span><span class="o">),</span> <span class="n">max</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<p><div id="cmspan"><div>
<strong>A better solution by <a href="http://cyrilmottier.com">Cyril Mottier</a></strong></p>

<p>First, we don&rsquo;t need to get the ActionBar title view reference anymore. We are going to use a <a href="http://developer.android.com/reference/android/text/SpannableString.html">SpannableString</a> with a custom <a href="http://developer.android.com/reference/android/text/style/ForegroundColorSpan.html">ForegroundColorSpan</a>. We need a custom ForegroundColorSpan to be able to set the color alpha.</p>

<p><figure class='code'><figcaption><span>AlphaForegroundColorSpan.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AlphaForegroundColorSpan</span> <span class="kd">extends</span> <span class="n">ForegroundColorSpan</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">float</span> <span class="n">mAlpha</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">AlphaForegroundColorSpan</span><span class="o">(</span><span class="kt">int</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="o">[&hellip;]</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateDrawState</span><span class="o">(</span><span class="n">TextPaint</span> <span class="n">ds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ds</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">getAlphaColor</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAlpha</span><span class="o">(</span><span class="kt">float</span> <span class="n">alpha</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mAlpha</span> <span class="o">=</span> <span class="n">alpha</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">float</span> <span class="nf">getAlpha</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mAlpha</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getAlphaColor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">foregroundColor</span> <span class="o">=</span> <span class="n">getForegroundColor</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Color</span><span class="o">.</span><span class="na">argb</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">mAlpha</span> <span class="o">*</span> <span class="mi">255</span><span class="o">),</span> <span class="n">Color</span><span class="o">.</span><span class="na">red</span><span class="o">(</span><span class="n">foregroundColor</span><span class="o">),</span> <span class="n">Color</span><span class="o">.</span><span class="na">green</span><span class="o">(</span><span class="n">foregroundColor</span><span class="o">),</span> <span class="n">Color</span><span class="o">.</span><span class="na">blue</span><span class="o">(</span><span class="n">foregroundColor</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>On ListView scroll, we set the alpha value on the AlphaForegroundColorSpan object and finally call ActionBar#setTitle to refresh the title view. Notice that you must keep the same AlphaForegroundColorSpan and SpannableString instances for performance (avoiding GC).</p>

<p><figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnScrollListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AbsListView</span><span class="o">.</span><span class="na">OnScrollListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScrollStateChanged</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">scrollState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">clamp</span><span class="o">(</span><span class="n">mHeader</span><span class="o">.</span><span class="na">getTranslationY</span><span class="o">()</span> <span class="o">/</span> <span class="n">mMinHeaderTranslation</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//actionbar title alpha</span>
</span><span class='line'>            <span class="n">setTitleAlpha</span><span class="o">(</span><span class="n">clamp</span><span class="o">(</span><span class="mf">5.0</span><span class="n">F</span> <span class="o">*</span> <span class="n">ratio</span> <span class="o">-</span> <span class="mf">4.0</span><span class="n">F</span><span class="o">,</span> <span class="mf">0.0</span><span class="n">F</span><span class="o">,</span> <span class="mf">1.0</span><span class="n">F</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setTitleAlpha</span><span class="o">(</span><span class="kt">float</span> <span class="n">alpha</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mAlphaForegroundColorSpan</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="n">alpha</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mSpannableString</span><span class="o">.</span><span class="na">setSpan</span><span class="o">(</span><span class="n">mAlphaForegroundColorSpan</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mSpannableString</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">Spannable</span><span class="o">.</span><span class="na">SPAN_EXCLUSIVE_EXCLUSIVE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">getActionBar</span><span class="o">().</span><span class="na">setTitle</span><span class="o">(</span><span class="n">mSpannableString</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><em>Thanks to Cyril Mottier for pointing this out. It&rsquo;s a very elegant solution!</em></p>

<h1>Moving &amp; scaling the icon</h1>

<p>You need to retrieve the icon View to make a translation. This view can be retrieve using the classical findById method.</p>

<p><figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">ImageView</span> <span class="nf">getActionBarIconView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">home</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then, set a transparent icon on the ActionBar</p>

<p><figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ActionBar</span> <span class="n">actionBar</span> <span class="o">=</span> <span class="n">getActionBar</span><span class="o">();</span>
</span><span class='line'><span class="n">actionBar</span><span class="o">.</span><span class="na">setIcon</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">ic_transparent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>On ListView scroll, you have to move &amp; scale depending on the header translation ratio. The main principle is to make a &ldquo;diff&rdquo; between the transparent (i.e. invisible) ActionBar icon view and the header logo view. This &ldquo;diff&rdquo; is calculated using the Rect on screen of the 2 views and results in scaleX, scaleY, translationX and translationY values. Finally, those values are used to translate and scale the header logo view until it matches the transparent ActionBar icon view.</p>

<p><figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnScrollListener</span><span class="o">(</span><span class="k">new</span> <span class="n">AbsListView</span><span class="o">.</span><span class="na">OnScrollListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScrollStateChanged</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">scrollState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onScroll</span><span class="o">(</span><span class="n">AbsListView</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstVisibleItem</span><span class="o">,</span> <span class="kt">int</span> <span class="n">visibleItemCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">totalItemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">ratio</span> <span class="o">=</span> <span class="n">clamp</span><span class="o">(</span><span class="n">mHeader</span><span class="o">.</span><span class="na">getTranslationY</span><span class="o">()</span> <span class="o">/</span> <span class="n">mMinHeaderTranslation</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//move &amp; scale</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">interpolation</span> <span class="o">=</span> <span class="n">mAccelerateDecelerateInterpolator</span><span class="o">.</span><span class="na">getInterpolation</span><span class="o">(</span><span class="n">ratio</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">View</span> <span class="n">actionBarIconView</span> <span class="o">=</span> <span class="n">getActionBarIconView</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">getOnScreenRect</span><span class="o">(</span><span class="n">mRect1</span><span class="o">,</span> <span class="n">mHeaderLogo</span><span class="o">);</span>
</span><span class='line'>            <span class="n">getOnScreenRect</span><span class="o">(</span><span class="n">mRect2</span><span class="o">,</span> <span class="n">actionBarIconView</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">float</span> <span class="n">scaleX</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">F</span> <span class="o">+</span> <span class="n">interpolation</span> <span class="o"><em></span> <span class="o">(</span><span class="n">mRect2</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">/</span> <span class="n">mRect1</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">-</span> <span class="mf">1.0</span><span class="n">F</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">scaleY</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">F</span> <span class="o">+</span> <span class="n">interpolation</span> <span class="o"></em></span> <span class="o">(</span><span class="n">mRect2</span><span class="o">.</span><span class="na">height</span><span class="o">()</span> <span class="o">/</span> <span class="n">mRect1</span><span class="o">.</span><span class="na">height</span><span class="o">()</span> <span class="o">-</span> <span class="mf">1.0</span><span class="n">F</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">translationX</span> <span class="o">=</span> <span class="mf">0.5</span><span class="n">F</span> <span class="o"><em></span> <span class="o">(</span><span class="n">interpolation</span> <span class="o"></em></span> <span class="o">(</span><span class="n">mRect2</span><span class="o">.</span><span class="na">left</span> <span class="o">+</span> <span class="n">mRect2</span><span class="o">.</span><span class="na">right</span> <span class="o">-</span> <span class="n">mRect1</span><span class="o">.</span><span class="na">left</span> <span class="o">-</span> <span class="n">mRect1</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">translationY</span> <span class="o">=</span> <span class="mf">0.5</span><span class="n">F</span> <span class="o"><em></span> <span class="o">(</span><span class="n">interpolation</span> <span class="o"></em></span> <span class="o">(</span><span class="n">mRect2</span><span class="o">.</span><span class="na">top</span> <span class="o">+</span> <span class="n">mRect2</span><span class="o">.</span><span class="na">bottom</span> <span class="o">-</span> <span class="n">mRect1</span><span class="o">.</span><span class="na">top</span> <span class="o">-</span> <span class="n">mRect1</span><span class="o">.</span><span class="na">bottom</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">mHeaderLogo</span><span class="o">.</span><span class="na">setTranslationX</span><span class="o">(</span><span class="n">translationX</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mHeaderLogo</span><span class="o">.</span><span class="na">setTranslationY</span><span class="o">(</span><span class="n">translationY</span> <span class="o">-</span> <span class="n">mHeader</span><span class="o">.</span><span class="na">getTranslationY</span><span class="o">());</span>
</span><span class='line'>            <span class="n">mHeaderLogo</span><span class="o">.</span><span class="na">setScaleX</span><span class="o">(</span><span class="n">scaleX</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mHeaderLogo</span><span class="o">.</span><span class="na">setScaleY</span><span class="o">(</span><span class="n">scaleY</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Notice that you can use an <a href="http://developer.android.com/reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a> on the ratio to make this animation smoother</p>

<h1>BONUS: Ken Burns animation</h1>

<p>Currently working on this part. The code is already available <a href="https://github.com/flavienlaurent/NotBoringActionBar/blob/master/App/src/main/java/com/flavienlaurent/notboringactionbar/KenBurnsView.java">KenBurnsView.java</a></p>

<h1>Conclusion</h1>

<p>As it&rsquo;s said <a href="https://plus.google.com/118417777153109946393/posts/CotvBV7FpNk">here</a>, it&rsquo;s always (with a few different details) the same trick called synchronized scrolling. The true genius of this effect is to have thought about it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Each Navigation Drawer Hides a ViewDragHelper]]></title>
    <link href="http://flavienlaurent.com/blog/2013/08/28/each-navigation-drawer-hides-a-viewdraghelper/"/>
    <updated>2013-08-28T18:56:00+02:00</updated>
    <id>http://flavienlaurent.com/blog/2013/08/28/each-navigation-drawer-hides-a-viewdraghelper</id>
    <content type="html"><![CDATA[<p>Recently, at the Google I/O 2013, two new layouts have been introduced: <code>SlidingPaneLayout</code>, a view that can be dragged from bottom to top and vice versa and the <code>DrawerLayout</code>, now used in almost all Google applications. Both of these use a new concept to more easily manage dragging: the <strong>ViewDragHelper</strong>.</p>

<!-- more -->


<p>In this article, I’m going to talk about the ViewDragHelper (aka VDH) because making a custom layout with dragging child view may be pain sometimes. First, I will show you how to use it and how it works (the main lines). Secondly, I will expose you a use case where the VDH is really useful.</p>

<p><a href="http://flavienlaurent.com/media/2013-08-28-each-navigation-drawer-hides-a-viewdraghelper/sample.apk">Download Sample Application</a></p>

<h1>API design</h1>

<h2>In a few words</h2>

<p>There are some important points to remember about VDH:</p>

<ul>
<li>a <code>ViewDragHelper.Callback</code> is used as a communication channel between parent view and VDH</li>
<li>there is a static factory method to create a VDH instance</li>
<li>you can configure the drag direction as you want</li>
<li>a drag can be detected from edge even if there is no view to capture (left, right, top, bottom)</li>
</ul>


<p>Remember to read the official documentation: <a href="http://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html">ViewDragHelper</a> and <a href="http://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.Callback.html">ViewDragHelper.Callback</a></p>

<h2>Reading the source code</h2>

<p>The VDH and its callback are available in the support-v4 library. You can read the source code : <a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/master/v4/java/android/support/v4/widget/ViewDragHelper.java">ViewDragHelper</a> and <a href="http://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.Callback.html">ViewDragHelper.Callback</a>.</p>

<p>It uses some common classes of the framework : a <a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/view/VelocityTracker.java">VelocityTracker</a> for tracking fingling and other touch events and a <a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/widget/Scroller.java">Scroller</a> to scroll views when it&rsquo;s needed.</p>

<p>You must read the source code as much as possible because first, it’s very interesting and then if you know how it works, you will be able to use it in a better way.</p>

<h1>Using the VDH</h1>

<p>In this section, I’m going to show you a few examples of what is possible to configure on a VDH. Let’s begin with some initializations and then, I will explain a few possible configurations.</p>

<h2>VDH&rsquo;s initialization</h2>

<p>A custom <code>ViewGroup</code> extending a <code>LinearLayout</code> (<code>DragLayout</code>) with a simple child <code>View</code> (named <code>mDragView</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DragLayout</span> <span class="kd">extends</span> <span class="n">LinearLayout</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ViewDragHelper</span> <span class="n">mDragHelper</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">View</span> <span class="n">mDragView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">DragLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">DragLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">DragLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyle</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a VDH with its callback. Note that you can specify the sensivity (official documentation says <em>Multiplier for how sensitive the helper should be about detecting the start of a drag. Larger values are more sensitive. 1.0f is normal.</em>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">DragLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyle</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mDragHelper</span> <span class="o">=</span> <span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DragHelperCallback</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The most important, don&rsquo;t forget to call VDH methods in <code>onInterceptTouch</code> and <code>onTouch</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">action</span> <span class="o">=</span> <span class="n">MotionEventCompat</span><span class="o">.</span><span class="na">getActionMasked</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span> <span class="o">||</span> <span class="n">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mDragHelper</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mDragHelper</span><span class="o">.</span><span class="na">shouldInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mDragHelper</span><span class="o">.</span><span class="na">processTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can change the VDH behavior just by configuring the callback.</p>

<h2>Horizontal only</h2>

<p>Implements <code>clampViewPositionHorizontal</code> to allow horizontal drag and to bound the drag motion. Note that documentation says <em>The default implementation does not allow horizontal motion</em>.</p>

<p><em>You have to take margins and parent padding into consideration.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">clampViewPositionHorizontal</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;DragLayout&quot;</span><span class="o">,</span> <span class="s">&quot;clampViewPositionHorizontal &quot;</span> <span class="o">+</span> <span class="n">left</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span> <span class="o">+</span> <span class="n">dx</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">leftBound</span> <span class="o">=</span> <span class="n">getPaddingLeft</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">rightBound</span> <span class="o">=</span> <span class="n">getWidth</span><span class="o">()</span> <span class="o">-</span> <span class="n">mDragView</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">newLeft</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">leftBound</span><span class="o">),</span> <span class="n">rightBound</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">newLeft</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2013-08-28-each-navigation-drawer-hides-a-viewdraghelper/hdrag.gif"></p>

<h2>Vertical only</h2>

<p>Implements <code>clampViewPositionVertical</code> to allow horizontal drag and to bound the drag motion. Note that documentation says <em>The default implementation does not allow vertical motion</em>.</p>

<p><em>You have to take margins and parent padding into consideration. Not like in the code below</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">clampViewPositionVertical</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">topBound</span> <span class="o">=</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">bottomBound</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">mDragView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">newTop</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">top</span><span class="o">,</span> <span class="n">topBound</span><span class="o">),</span> <span class="n">bottomBound</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">newTop</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2013-08-28-each-navigation-drawer-hides-a-viewdraghelper/vdrag.gif"></p>

<h2>Capture or not capture a view</h2>

<p>Implements <code>tryCaptureView</code> to allow a child view to be captured. Here, there are two child views (<code>mDragView1</code> and <code>mDragView2</code>) but only one (<code>mDragView1</code>) is draggable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">tryCaptureView</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pointerId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">child</span> <span class="o">==</span> <span class="n">mDragView1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2013-08-28-each-navigation-drawer-hides-a-viewdraghelper/capture.gif"></p>

<h2>DragRange</h2>

<p>Implements <code>getViewHorizontalDragRange</code> or <code>getViewVerticalDragRange</code> to returns the range of horizontal|vertical drag in pixels. This range is used by the VDH when you call <code>smoothSlideViewTo</code> or <code>settleCapturedViewAt</code> to calculate the scroll duration. Also, it’s used to check the horizontal|vertical touch slop.</p>

<h2>Edge dragging</h2>

<p>This feature is used in the <code>DrawerLayout</code> with <code>EDGE_LEFT</code> and <code>EDGE_RIGHT</code>.</p>

<p>Configure the VDH to enable edge tracking.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mDragHelper</span><span class="o">.</span><span class="na">setEdgeTrackingEnabled</span><span class="o">(</span><span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">EDGE_LEFT</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Implements <code>onEdgeTouched</code> called when the configured edge is touched. <em>Note that at this time, no child view is currently captured.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onEdgeTouched</span><span class="o">(</span><span class="kt">int</span> <span class="n">edgeFlags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pointerId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onEdgeTouched</span><span class="o">(</span><span class="n">edgeFlags</span><span class="o">,</span> <span class="n">pointerId</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getContext</span><span class="o">(),</span> <span class="s">&quot;edgeTouched&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Implements <code>onEdgeDragStarted</code> called when a real drag from the configured edge has started. <em>Note that at this time, no child view is currently captured.</em> In this method, you have to capture a child view manually.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onEdgeDragStarted</span><span class="o">(</span><span class="kt">int</span> <span class="n">edgeFlags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pointerId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mDragHelper</span><span class="o">.</span><span class="na">captureChildView</span><span class="o">(</span><span class="n">mDragView2</span><span class="o">,</span> <span class="n">pointerId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2013-08-28-each-navigation-drawer-hides-a-viewdraghelper/edge.gif"></p>

<h2>A real example, the Youtube while playing layout</h2>

<p>Recently, I’ve received an update of the Youtube app on my phone. Before this update, the most annoying thing was to not be able to watch a video and search the next video at the same time. They fixed this by implementing a nice layout in which you can minimize the video view from top to bottom.</p>

<p>I’m going to show how to do it and how it’s simple thanks to VDH.</p>

<p>Here is the expected result</p>

<p><img src="http://flavienlaurent.com/media/2013-08-28-each-navigation-drawer-hides-a-viewdraghelper/youtube.gif"></p>

<p>Key points:</p>

<ul>
<li><code>tryCaptureView</code> returns true only for the header view</li>
<li>drag range is calculated <code>onLayout</code></li>
<li>use VDH’s methods in <code>onInterceptTouchEvent</code> and <code>onTouchEvent</code></li>
<li>call <code>continueSettling</code> in <code>computeScroll</code> (because VDH uses a scroller)</li>
<li>use <code>smoothSlideViewTo</code> to finish the drag motion</li>
</ul>


<p>Be careful, this layout is not well made: it’s a draft. There is still work to do; on the scale part, touch event when the header is scaled, <code>onLayout</code> and <code>onMeasure</code> are badly written too. Also, I don’t know if calling <code>requestLayout</code> in <code>onViewPositionChanged</code> is good solution… Anyway, if you have remarks or ideas to improve this layout, please tell me!).</p>

<figure class='code'><figcaption><span>activity_main.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;FrameLayout</span>
</span><span class='line'>
</span><span class='line'>        <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ListView</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/listView&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:tag=</span><span class="s">&quot;list&quot;</span>
</span><span class='line'>            <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;com.example.vdh.YoutubeLayout</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/youtubeLayout&quot;</span>
</span><span class='line'>            <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>            <span class="na">android:visibility=</span><span class="s">&quot;visible&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>                <span class="na">android:id=</span><span class="s">&quot;@+id/viewHeader&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;128dp&quot;</span>
</span><span class='line'>                <span class="na">android:fontFamily=</span><span class="s">&quot;sans-serif-thin&quot;</span>
</span><span class='line'>                <span class="na">android:textSize=</span><span class="s">&quot;25sp&quot;</span>
</span><span class='line'>                <span class="na">android:tag=</span><span class="s">&quot;text&quot;</span>
</span><span class='line'>                <span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>                <span class="na">android:textColor=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>                <span class="na">android:background=</span><span class="s">&quot;#AD78CC&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>                <span class="na">android:id=</span><span class="s">&quot;@+id/viewDesc&quot;</span>
</span><span class='line'>                <span class="na">android:tag=</span><span class="s">&quot;desc&quot;</span>
</span><span class='line'>                <span class="na">android:textSize=</span><span class="s">&quot;35sp&quot;</span>
</span><span class='line'>                <span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'>                <span class="na">android:text=</span><span class="s">&quot;Loreum Loreum&quot;</span>
</span><span class='line'>                <span class="na">android:textColor=</span><span class="s">&quot;@android:color/white&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>                <span class="na">android:background=</span><span class="s">&quot;#FF00FF&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/com.example.vdh.YoutubeLayout&gt;</span>
</span><span class='line'><span class="nt">&lt;/FrameLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>YoutubeLayout.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">YoutubeLayout</span> <span class="kd">extends</span> <span class="n">ViewGroup</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ViewDragHelper</span> <span class="n">mDragHelper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">View</span> <span class="n">mHeaderView</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">View</span> <span class="n">mDescView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">float</span> <span class="n">mInitialMotionX</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">float</span> <span class="n">mInitialMotionY</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">mDragRange</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">mTop</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">float</span> <span class="n">mDragOffset</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">YoutubeLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">YoutubeLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onFinishInflate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHeaderView</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">viewHeader</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mDescView</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">viewDesc</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">YoutubeLayout</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyle</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyle</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mDragHelper</span> <span class="o">=</span> <span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">,</span> <span class="k">new</span> <span class="nf">DragHelperCallback</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">maximize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">smoothSlideTo</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">boolean</span> <span class="nf">smoothSlideTo</span><span class="o">(</span><span class="kt">float</span> <span class="n">slideOffset</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">topBound</span> <span class="o">=</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">topBound</span> <span class="o">+</span> <span class="n">slideOffset</span> <span class="o">*</span> <span class="n">mDragRange</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mDragHelper</span><span class="o">.</span><span class="na">smoothSlideViewTo</span><span class="o">(</span><span class="n">mHeaderView</span><span class="o">,</span> <span class="n">mHeaderView</span><span class="o">.</span><span class="na">getLeft</span><span class="o">(),</span> <span class="n">y</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ViewCompat</span><span class="o">.</span><span class="na">postInvalidateOnAnimation</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">DragHelperCallback</span> <span class="kd">extends</span> <span class="n">ViewDragHelper</span><span class="o">.</span><span class="na">Callback</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">tryCaptureView</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pointerId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">child</span> <span class="o">==</span> <span class="n">mHeaderView</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onViewPositionChanged</span><span class="o">(</span><span class="n">View</span> <span class="n">changedView</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mTop</span> <span class="o">=</span> <span class="n">top</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mDragOffset</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">top</span> <span class="o">/</span> <span class="n">mDragRange</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mHeaderView</span><span class="o">.</span><span class="na">setPivotX</span><span class="o">(</span><span class="n">mHeaderView</span><span class="o">.</span><span class="na">getWidth</span><span class="o">());</span>
</span><span class='line'>        <span class="n">mHeaderView</span><span class="o">.</span><span class="na">setPivotY</span><span class="o">(</span><span class="n">mHeaderView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>
</span><span class='line'>        <span class="n">mHeaderView</span><span class="o">.</span><span class="na">setScaleX</span><span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">mDragOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mHeaderView</span><span class="o">.</span><span class="na">setScaleY</span><span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">mDragOffset</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mDescView</span><span class="o">.</span><span class="na">setAlpha</span><span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">mDragOffset</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">requestLayout</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onViewReleased</span><span class="o">(</span><span class="n">View</span> <span class="n">releasedChild</span><span class="o">,</span> <span class="kt">float</span> <span class="n">xvel</span><span class="o">,</span> <span class="kt">float</span> <span class="n">yvel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">yvel</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="o">(</span><span class="n">yvel</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">mDragOffset</span> <span class="o">&gt;</span> <span class="mf">0.5f</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">top</span> <span class="o">+=</span> <span class="n">mDragRange</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">mDragHelper</span><span class="o">.</span><span class="na">settleCapturedViewAt</span><span class="o">(</span><span class="n">releasedChild</span><span class="o">.</span><span class="na">getLeft</span><span class="o">(),</span> <span class="n">top</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getViewVerticalDragRange</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">mDragRange</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">clampViewPositionVertical</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="kt">int</span> <span class="n">topBound</span> <span class="o">=</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>      <span class="kd">final</span> <span class="kt">int</span> <span class="n">bottomBound</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">mHeaderView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">mHeaderView</span><span class="o">.</span><span class="na">getPaddingBottom</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">final</span> <span class="kt">int</span> <span class="n">newTop</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">top</span><span class="o">,</span> <span class="n">topBound</span><span class="o">),</span> <span class="n">bottomBound</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">newTop</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">computeScroll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mDragHelper</span><span class="o">.</span><span class="na">continueSettling</span><span class="o">(</span><span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ViewCompat</span><span class="o">.</span><span class="na">postInvalidateOnAnimation</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">action</span> <span class="o">=</span> <span class="n">MotionEventCompat</span><span class="o">.</span><span class="na">getActionMasked</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">((</span> <span class="n">action</span> <span class="o">!=</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mDragHelper</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span> <span class="o">||</span> <span class="n">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mDragHelper</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">interceptTap</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mInitialMotionX</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>          <span class="n">mInitialMotionY</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>            <span class="n">interceptTap</span> <span class="o">=</span> <span class="n">mDragHelper</span><span class="o">.</span><span class="na">isViewUnder</span><span class="o">(</span><span class="n">mHeaderView</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">x</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">final</span> <span class="kt">float</span> <span class="n">adx</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">mInitialMotionX</span><span class="o">);</span>
</span><span class='line'>          <span class="kd">final</span> <span class="kt">float</span> <span class="n">ady</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">mInitialMotionY</span><span class="o">);</span>
</span><span class='line'>          <span class="kd">final</span> <span class="kt">int</span> <span class="n">slop</span> <span class="o">=</span> <span class="n">mDragHelper</span><span class="o">.</span><span class="na">getTouchSlop</span><span class="o">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">ady</span> <span class="o">&gt;</span> <span class="n">slop</span> <span class="o">&amp;&amp;</span> <span class="n">adx</span> <span class="o">&gt;</span> <span class="n">ady</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">mDragHelper</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">mDragHelper</span><span class="o">.</span><span class="na">shouldInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">)</span> <span class="o">||</span> <span class="n">interceptTap</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mDragHelper</span><span class="o">.</span><span class="na">processTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">action</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">ev</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">isHeaderViewUnder</span> <span class="o">=</span> <span class="n">mDragHelper</span><span class="o">.</span><span class="na">isViewUnder</span><span class="o">(</span><span class="n">mHeaderView</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">x</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">action</span> <span class="o">&amp;</span> <span class="n">MotionEventCompat</span><span class="o">.</span><span class="na">ACTION_MASK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mInitialMotionX</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>          <span class="n">mInitialMotionY</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">final</span> <span class="kt">float</span> <span class="n">dx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">mInitialMotionX</span><span class="o">;</span>
</span><span class='line'>          <span class="kd">final</span> <span class="kt">float</span> <span class="n">dy</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">mInitialMotionY</span><span class="o">;</span>
</span><span class='line'>          <span class="kd">final</span> <span class="kt">int</span> <span class="n">slop</span> <span class="o">=</span> <span class="n">mDragHelper</span><span class="o">.</span><span class="na">getTouchSlop</span><span class="o">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">dx</span> <span class="o">*</span> <span class="n">dx</span> <span class="o">+</span> <span class="n">dy</span> <span class="o">*</span> <span class="n">dy</span> <span class="o">&lt;</span> <span class="n">slop</span> <span class="o">*</span> <span class="n">slop</span> <span class="o">&amp;&amp;</span> <span class="n">isHeaderViewUnder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">mDragOffset</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">smoothSlideTo</span><span class="o">(</span><span class="mi">1</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">smoothSlideTo</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">isHeaderViewUnder</span> <span class="o">&amp;&amp;</span> <span class="n">isViewHit</span><span class="o">(</span><span class="n">mHeaderView</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">x</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">y</span><span class="o">)</span> <span class="o">||</span> <span class="n">isViewHit</span><span class="o">(</span><span class="n">mDescView</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">x</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">y</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isViewHit</span><span class="o">(</span><span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">viewLocation</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">getLocationOnScreen</span><span class="o">(</span><span class="n">viewLocation</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">parentLocation</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">getLocationOnScreen</span><span class="o">(</span><span class="n">parentLocation</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">screenX</span> <span class="o">=</span> <span class="n">parentLocation</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">screenY</span> <span class="o">=</span> <span class="n">parentLocation</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">screenX</span> <span class="o">&gt;=</span> <span class="n">viewLocation</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">screenX</span> <span class="o">&lt;</span> <span class="n">viewLocation</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">view</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="n">screenY</span> <span class="o">&gt;=</span> <span class="n">viewLocation</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">screenY</span> <span class="o">&lt;</span> <span class="n">viewLocation</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">view</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onMeasure</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">measureChildren</span><span class="o">(</span><span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxWidth</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">widthMeasureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxHeight</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setMeasuredDimension</span><span class="o">(</span><span class="n">resolveSizeAndState</span><span class="o">(</span><span class="n">maxWidth</span><span class="o">,</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span>
</span><span class='line'>            <span class="n">resolveSizeAndState</span><span class="o">(</span><span class="n">maxHeight</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">,</span> <span class="mi">0</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onLayout</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">changed</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mDragRange</span> <span class="o">=</span> <span class="n">getHeight</span><span class="o">()</span> <span class="o">-</span> <span class="n">mHeaderView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mHeaderView</span><span class="o">.</span><span class="na">layout</span><span class="o">(</span>
</span><span class='line'>            <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mTop</span><span class="o">,</span>
</span><span class='line'>            <span class="n">r</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mTop</span> <span class="o">+</span> <span class="n">mHeaderView</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mDescView</span><span class="o">.</span><span class="na">layout</span><span class="o">(</span>
</span><span class='line'>            <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mTop</span> <span class="o">+</span> <span class="n">mHeaderView</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">r</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mTop</span>  <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>The VDH is one of the useful but <strong>unknown</strong> class in the framework. Don’t hesitate to try it, use it and to appreciate it because it saves a lot of time and a lot of code!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViewOverlay: When, How and for What Purpose?]]></title>
    <link href="http://flavienlaurent.com/blog/2013/08/14/viewoverlay-when-how-and-for-what-purpose/"/>
    <updated>2013-08-14T12:19:00+02:00</updated>
    <id>http://flavienlaurent.com/blog/2013/08/14/viewoverlay-when-how-and-for-what-purpose</id>
    <content type="html"><![CDATA[<p>In Android 4.3, a new feature for developer has been added: Overlays. When announcing this feature, the first thing I did was looking at the source code to understand how it works. Right after, I tried to find good use cases to fully exploit the potential of this feature.
So in this post, I&rsquo;m going to tell you more about this useful feature.</p>

<!--more-->


<p><em>Obviously, you must install the following apk on Android 4.3</em></p>

<p><a href="http://flavienlaurent.com/blog/2013/08/14/viewoverlay-when-how-and-for-what-purpose/sample.apk">Download Sample Application</a></p>

<h1>Overlays, how it works ?</h1>

<h2>In a few words</h2>

<p>The official documentation about overlays is quite clear and you should <a href="http://developer.android.com/reference/android/view/ViewOverlay.html">read it</a>. For more details, you can read this <a href="http://graphics-geek.blogspot.fr/2013/07/new-in-android-43-viewoverlay.html">Chet Haase&rsquo;s post</a>.</p>

<p>Important points to remember about overlays:</p>

<ul>
<li>two types of overlays : ViewOverlay (for Views) and ViewGroupOverlay (for ViewGroups)</li>
<li>two methods to retrieve a view overlay : <code>View.getViewOverlay</code> / <code>ViewGroup.getViewGroupOverlay</code></li>
<li>you can add/remove a <strong>drawable</strong> in ViewOverlay and ViewGroupOverlay</li>
<li>you can add/remove a <strong>view</strong> in ViewGroupOverlay</li>
<li>the documentation says <code>An overlay [...] on top of a View [...] drawn after all other content in that view [...]</code></li>
<li>Chet Haase&rsquo;s said <code>[...] you are responsible for positioning/sizing the views/drawables where you want them in the overlay [...]</code></li>
</ul>


<h2>Reading the source code</h2>

<p>Let&rsquo;s start by looking at the <code>View.getViewOverlay</code>/ <code>View.getViewGroupOverlay</code> methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">ViewOverlay</span> <span class="nf">getOverlay</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mOverlay</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mOverlay</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ViewOverlay</span><span class="o">(</span><span class="n">mContext</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mOverlay</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">ViewGroupOverlay</span> <span class="nf">getOverlay</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mOverlay</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mOverlay</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ViewGroupOverlay</span><span class="o">(</span><span class="n">mContext</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">ViewGroupOverlay</span><span class="o">)</span> <span class="n">mOverlay</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A ViewOverlay/ViewGroupOverlay is created when the get method is called.</p>

<p>How ViewOverlay/ViewGroupOverlay works?
<em>Note that a ViewGroupOverlay extends ViewOverlay, so we can focus on the ViewOverlay implementation</em></p>

<p><a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/view/ViewOverlay.java">ViewOverlay.java</a></p>

<p>ViewOverlay implementation is based on a OverlayViewGroup (static inner class in ViewOverlay). The OverlayViewGroup extends ViewGroup and contains a list of drawables. As you can see, there isn&rsquo;t any method to layout drawables or child views that&rsquo;s why you are responsible for positioning/sizing them.</p>

<p>Two more interesting things :</p>

<ol>
<li>the documentation says <code>view will be repositioned such that it is in the same relative location inside the activity</code>.</li>
</ol>


<figure class='code'><figcaption><span>OverlayViewGroup.add(View child)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">parentLocation</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">hostViewLocation</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'><span class="n">parent</span><span class="o">.</span><span class="na">getLocationOnScreen</span><span class="o">(</span><span class="n">parentLocation</span><span class="o">);</span>
</span><span class='line'><span class="n">mHostView</span><span class="o">.</span><span class="na">getLocationOnScreen</span><span class="o">(</span><span class="n">hostViewLocation</span><span class="o">);</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="na">offsetLeftAndRight</span><span class="o">(</span><span class="n">parentLocation</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="n">hostViewLocation</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'><span class="n">child</span><span class="o">.</span><span class="na">offsetTopAndBottom</span><span class="o">(</span><span class="n">parentLocation</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">hostViewLocation</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>all invalidation calls on a OverlayViewGroup are forwarded to its host view <code>because the overlay is not a child of the host view and invalidation cannot therefore follow the normal path up through the parent hierarchy</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">invalidate</span><span class="o">(</span><span class="n">Rect</span> <span class="n">dirty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">dirty</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mHostView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mHostView</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">dirty</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">invalidate</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">t</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mHostView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mHostView</span><span class="o">.</span><span class="na">invalidate</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">invalidate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mHostView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mHostView</span><span class="o">.</span><span class="na">invalidate</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">[...]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Two <u>real</u> use cases</h1>

<p>I underlined the word <em>real</em> because I didn&rsquo;t want to explain you how to use Overlay with irrelevant examples. That&rsquo;s why, I&rsquo;m going to present you two problems solved thanks to Overlays : a button with a banner and how to animate a view deletion.</p>

<h2>A button with a banner (ViewOverlay)</h2>

<p>Here we want to add a banner with some text on top-right corner of a button as you can see below.</p>

<p><img src="http://flavienlaurent.com/media/2013-08-14-viewoverlay-when-how-and-for-what-purpose/banner-button.png"></p>

<p>The main difficulty is that we don&rsquo;t want the button&rsquo;s behaviour to be changed by the banner (i.e. click, touch etc.).</p>

<h3>A basic xml layout</h3>

<p>Here we have a basic layout with one button.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">RelativeLayout</span>
</span><span class='line'><span class="nl">xmlns:</span><span class="n">android</span><span class="o">=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;match_parent&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">Button</span>
</span><span class='line'><span class="nl">android:</span><span class="n">id</span><span class="o">=</span><span class="s">&quot;@+id/button&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">text</span><span class="o">=</span><span class="s">&quot;Click me even if I&#39;m a pirate&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">background</span><span class="o">=</span><span class="s">&quot;@drawable/badged&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">layout_width</span><span class="o">=</span><span class="s">&quot;250dp&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">layout_height</span><span class="o">=</span><span class="s">&quot;250dp&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">textColor</span><span class="o">=</span><span class="s">&quot;#FFF&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">fontFamily</span><span class="o">=</span><span class="s">&quot;sans-serif-condensed&quot;</span>
</span><span class='line'><span class="nl">android:</span><span class="n">layout_centerHorizontal</span><span class="o">=</span><span class="s">&quot;true&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;/</span><span class="n">RelativeLayout</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A custom banner drawable</h3>

<p>For more flexibility (change the banner color, text etc), you have to implement a custom drawable in order to draw a banner.</p>

<p>I&rsquo;m not gonna explain how to draw a banner because this is not the main purpose of this post. If you have questions, don&rsquo;t hesitate to <a href="http://twitter.com/flavienlaurent">ask me</a>. So, here is the custom drawable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">BannerDrawable</span> <span class="kd">extends</span> <span class="n">Drawable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">SQRT_2</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Rect</span> <span class="n">mTextBounds</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Paint</span> <span class="n">mPaintFill</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Paint</span> <span class="n">mPaintText</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">mMessage</span> <span class="o">=</span> <span class="s">&quot;I&#39;M A PIRATE BANNER&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">mBannerWidth</span> <span class="o">=</span> <span class="mi">50</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">mTextSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">BannerDrawable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">initPaintFill</span><span class="o">();</span>
</span><span class='line'>  <span class="n">initPaintText</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mTextBounds</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Rect</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initPaintFill</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mPaintFill</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Paint</span><span class="o">(</span><span class="n">ANTI_ALIAS_FLAG</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mPaintFill</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">FILL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mPaintFill</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">getResources</span><span class="o">().</span><span class="na">getColor</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">banner</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initPaintText</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mPaintText</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Paint</span><span class="o">(</span><span class="n">ANTI_ALIAS_FLAG</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mPaintText</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">FILL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mPaintText</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">WHITE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mPaintText</span><span class="o">.</span><span class="na">setTextSize</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mPaintText</span><span class="o">.</span><span class="na">setShadowLayer</span><span class="o">(</span><span class="mf">4.0f</span><span class="o">,</span> <span class="mf">2.0f</span><span class="o">,</span> <span class="mf">2.0f</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Rect</span> <span class="n">bounds</span> <span class="o">=</span> <span class="n">getBounds</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">bounds</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">bounds</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="na">getClipBounds</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">width</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">.</span><span class="na">width</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">adaptTextSize</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.9</span><span class="o">),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">mBannerWidth</span> <span class="o">*</span> <span class="mf">0.9</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">float</span> <span class="n">bannerHyp</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">mBannerWidth</span> <span class="o">*</span> <span class="n">SQRT_2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">bounds</span><span class="o">.</span><span class="na">centerY</span><span class="o">()</span> <span class="o">-</span> <span class="n">mBannerWidth</span><span class="o">);</span>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">rotate</span><span class="o">(</span><span class="mi">45</span><span class="o">,</span> <span class="n">bounds</span><span class="o">.</span><span class="na">centerX</span><span class="o">(),</span> <span class="n">bounds</span><span class="o">.</span><span class="na">centerY</span><span class="o">()</span> <span class="o">-</span> <span class="n">mBannerWidth</span><span class="o">);</span>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="n">bounds</span><span class="o">.</span><span class="na">left</span> <span class="o">-</span> <span class="n">bannerHyp</span><span class="o">,</span> <span class="n">bounds</span><span class="o">.</span><span class="na">top</span><span class="o">,</span> <span class="n">bounds</span><span class="o">.</span><span class="na">right</span> <span class="o">+</span> <span class="n">bannerHyp</span><span class="o">,</span> <span class="n">bounds</span><span class="o">.</span><span class="na">top</span> <span class="o">+</span> <span class="n">mBannerWidth</span><span class="o">,</span> <span class="n">mPaintFill</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">mMessage</span><span class="o">,</span> <span class="n">bounds</span><span class="o">.</span><span class="na">centerX</span><span class="o">()</span> <span class="o">-</span> <span class="n">mTextBounds</span><span class="o">.</span><span class="na">centerX</span><span class="o">(),</span> <span class="n">mBannerWidth</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">mTextBounds</span><span class="o">.</span><span class="na">height</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="n">mPaintText</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">adaptTextSize</span><span class="o">(</span><span class="kt">float</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mTextSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mPaintText</span><span class="o">.</span><span class="na">setTextSize</span><span class="o">(</span><span class="n">mTextSize</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">textSize</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">textHeight</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">textWidth</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">stop</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(!</span><span class="n">stop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mTextSize</span> <span class="o">=</span> <span class="n">textSize</span><span class="o">++;</span>
</span><span class='line'>      <span class="n">mPaintText</span><span class="o">.</span><span class="na">setTextSize</span><span class="o">(</span><span class="n">mTextSize</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mPaintText</span><span class="o">.</span><span class="na">getTextBounds</span><span class="o">(</span><span class="n">mMessage</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mMessage</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">mTextBounds</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">textHeight</span> <span class="o">=</span> <span class="n">mTextBounds</span><span class="o">.</span><span class="na">height</span><span class="o">();</span>
</span><span class='line'>      <span class="n">textWidth</span> <span class="o">=</span> <span class="n">mTextBounds</span><span class="o">.</span><span class="na">width</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">stop</span> <span class="o">=</span> <span class="n">textHeight</span> <span class="o">&gt;=</span> <span class="n">height</span> <span class="o">||</span> <span class="n">textWidth</span> <span class="o">&gt;=</span> <span class="n">width</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAlpha</span><span class="o">(</span><span class="kt">int</span> <span class="n">alpha</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColorFilter</span><span class="o">(</span><span class="n">ColorFilter</span> <span class="n">cf</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getOpacity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">PixelFormat</span><span class="o">.</span><span class="na">OPAQUE</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Finally, use a ViewOverlay</h3>

<p>This last step is quite simple. It consists in sizing and positioning a BannerDrawable and to add it to the button&rsquo;s ViewOverlay when the button has been fully laid out.</p>

<p><em>Note that the drawable bounds is the top right square of the button.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">View</span> <span class="n">button</span> <span class="o">=</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">ViewOverlay</span> <span class="n">overlay</span> <span class="o">=</span> <span class="n">button</span><span class="o">.</span><span class="na">getOverlay</span><span class="o">();</span>
</span><span class='line'><span class="kd">final</span> <span class="n">BannerDrawable</span> <span class="n">bannerDrawable</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BannerDrawable</span><span class="o">();</span>
</span><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//top right square</span>
</span><span class='line'>      <span class="n">bannerDrawable</span><span class="o">.</span><span class="na">setBounds</span><span class="o">(</span><span class="n">button</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">button</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">button</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="n">overlay</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bannerDrawable</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is piece of cake, isn&rsquo;t it ?</p>

<h2>Animating a view deletion (ViewGroupOverlay)</h2>

<p>This second use case is a bit more complicated. We&rsquo;re gonna animate the deletion of a view (i.e. Button) in a parent (i.e. LinearLayout) with a eyecatching approach.</p>

<p>If you still have not understand the use case I want to explain to you, you can take a look on the animated gif below.</p>

<p><img src="http://flavienlaurent.com/media/2013-08-14-viewoverlay-when-how-and-for-what-purpose/animated-deletion.gif"></p>

<h3>Step1: fill the parent</h3>

<p>Assume that we have an xml layout with an empty LinearLayout (id=<code>buttons</code>) inside a ScrollView.
We create 10 buttons inside the LinearLayout:</p>

<figure class='code'><figcaption><span>onCreate()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">final</span> <span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">[...</span> <span class="n">customize</span> <span class="n">the</span> <span class="n">button</span> <span class="o">...]</span>
</span><span class='line'>
</span><span class='line'><span class="n">buttons</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">button</span><span class="o">,</span> <span class="n">params</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">AnimActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="s">&quot;You click on a button&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">setOnLongClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnLongClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onLongClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">animatedDelete</span><span class="o">(</span><span class="n">button</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each button show a toast onClick and is deleted onLongClick.</p>

<h3>Step2: animate the deletion</h3>

<p>On delete, we scale up the button and decrease the alpha property. To achieve that, we use multiple <a href="http://developer.android.com/reference/android/animation/ObjectAnimator.html">ObjectAnimators</a> played together thanks to an <a href="http://developer.android.com/reference/android/animation/AnimatorSet.html">AnimatorSet</a>.</p>

<p>Before starting the animation, don&rsquo;t forget to add the button to the ViewGroupOverlay of the <strong>top parent</strong> (i.e. the activity main view) in order not to clip the button in the ViewGroupOverlay by its direct parent (i.e. LinearLayout).</p>

<p>Finally, when the animation ends or is cancelled, remove the button from the ViewGroupOverlay.</p>

<p>It gives us the following method</p>

<figure class='code'><figcaption><span>animatedDelete(Button)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">animatedDelete</span><span class="o">(</span><span class="kd">final</span> <span class="n">Button</span> <span class="n">button</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kd">final</span> <span class="n">ViewGroupOverlay</span> <span class="n">viewGroupOverlay</span> <span class="o">=</span> <span class="o">((</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">content</span><span class="o">)).</span><span class="na">getOverlay</span><span class="o">();</span>
</span><span class='line'><span class="n">viewGroupOverlay</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">button</span><span class="o">);</span>
</span><span class='line'><span class="n">AnimatorSet</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AnimatorSet</span><span class="o">();</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">playTogether</span><span class="o">(</span>
</span><span class='line'>      <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">button</span><span class="o">,</span> <span class="s">&quot;scaleX&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="n">f</span><span class="o">),</span>
</span><span class='line'>      <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">button</span><span class="o">,</span> <span class="s">&quot;scaleY&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="n">f</span><span class="o">),</span>
</span><span class='line'>      <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">button</span><span class="o">,</span> <span class="s">&quot;alpha&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">AnimatorListenerAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationEnd</span><span class="o">(</span><span class="n">Animator</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">viewGroupOverlay</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">button</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is it!</p>

<h2>Conclusion</h2>

<p>I&rsquo;ve shown you two real examples where using Overlay is clearly an appropriated method. The only serious disadvantage is that Overlays are only available since API level 18.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Your Background Moving Like on the Play Music App]]></title>
    <link href="http://flavienlaurent.com/blog/2013/08/05/make-your-background-moving-like-on-play-music-app/"/>
    <updated>2013-08-05T18:56:00+02:00</updated>
    <id>http://flavienlaurent.com/blog/2013/08/05/make-your-background-moving-like-on-play-music-app</id>
    <content type="html"><![CDATA[<p>After the Google I/O keynote 2013, like many of you, I&rsquo;ve received an update of the Play Music app. I think that it&rsquo;s one of the most beautiful and well-made application of Google. This app contains lots of animations, effects and good ux patterns to reproduce. In this first article, I want to talk specifically about the animated background in the now playing screen.</p>

<!--more-->


<p>If you start to play a song, you&rsquo;re going to see the album cover moving slowly (from right to left <em>to right</em> in portrait and from bottom to top <em>to bottom</em> in landscape). This animation is visually simple but it&rsquo;s kind of tricky.</p>

<p>If you still have not understand the animation I want to explain to you, you can take a look on the animated gif below or simply download &amp; install the sample application.</p>

<p><img src="http://flavienlaurent.com/media/2013-08-05-make-your-background-moving-like-on-play-music-app/setimagematrix-demo.gif"></p>

<p><a href="https://github.com/flavienlaurent/PanningView/blob/master/PanningView-debug-unaligned.apk?raw=true">Download Sample Application</a></p>

<h1>Playing with setImageMatrix</h1>

<h2>Deep in the framework</h2>

<p>Here is the offical documentation for <code>ImageView.setImageMatrix</code></p>

<p><img src="http://flavienlaurent.com/media/2013-08-05-make-your-background-moving-like-on-play-music-app/setimagematrix-documentation.png"></p>

<p>As you can see, this is a short explaination.
Basically, it replaces the matrix of the ImageView (set identity matrix if <code>null</code> is passed). Then, two methods are called: <code>configureBounds</code> and <code>invalidate</code>.</p>

<ul>
<li>configureBounds: according to the <a href="http://developer.android.com/reference/android/widget/ImageView.ScaleType.html"><code>scaleType</code></a>, the drawable is bounded and/or the draw matrix is modified. For example, in <code>CENTER_CROP</code> mode, the draw matrix is scaled and translated. In <code>MATRIX</code> mode, the draw matrix is only assigned to the matrix of the ImageView.</li>
<li>invalidate (i.e. <code>onDraw</code>): the only interesting thing is that the draw matrix (if not null) is concatenated with the canvas</li>
</ul>


<h2>Let&rsquo;s play</h2>

<p>If you want the ImageView to be drawn fully respecting your matrix, don&rsquo;t forget to set the <code>MATRIX</code> scaleType.</p>

<figure class='code'><figcaption><span>in code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mImageView</span><span class="o">.</span><span class="na">setScaleType</span><span class="o">(</span><span class="n">ScaleType</span><span class="o">.</span><span class="na">MATRIX</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>in xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>android:scaleType=&quot;matrix&quot;
</span></code></pre></td></tr></table></div></figure>


<p>Here is the ImageView with the original matrix:</p>

<p><img src="http://flavienlaurent.com/media/2013-08-05-make-your-background-moving-like-on-play-music-app/setimagematrix-original.png"></p>

<h3>Scale (factor 2 on x and y)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Matrix</span><span class="o">();</span>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="n">imageView</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2013-08-05-make-your-background-moving-like-on-play-music-app/setimagematrix-scale.png"></p>

<h3>Scale and rotate (15°)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Matrix</span><span class="o">();</span>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">postRotate</span><span class="o">(</span><span class="mi">15</span><span class="o">);</span>
</span><span class='line'><span class="n">imageView</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2013-08-05-make-your-background-moving-like-on-play-music-app/setimagematrix-scale-rotate.png"></p>

<h3>Scale and translate (the most interesting for us)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Matrix</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Matrix</span><span class="o">();</span>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="n">matrix</span><span class="o">.</span><span class="na">postTranslate</span><span class="o">(</span><span class="mi">45</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">imageView</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://flavienlaurent.com/media/2013-08-05-make-your-background-moving-like-on-play-music-app/setimagematrix-scale-translate.png"></p>

<h1>Make your background moving</h1>

<p>There are three phases to achieve in order to make your background moving:</p>

<ol>
<li>scale to fit the container</li>
<li>animate the background by doing some translations</li>
<li>loop this animation</li>
</ol>


<p>Last thing that you must know, we&rsquo;re gonna work with this background image:</p>

<p><img src="http://flavienlaurent.com/media/2013-08-05-make-your-background-moving-like-on-play-music-app/mybm-original.png"></p>

<h2>Step1: scale to fit</h2>

<p>This step is the easiest one. All you have to do is just to calculate the scale factor between the container size (i.e. the ImageView) and the drawable intrinsic size according to the current orientation and keeping the ratio:</p>

<ul>
<li>portrait, the drawable must be scaled to use all the available height</li>
<li>landscape, the drawable must be scale to use all the available width.</li>
</ul>


<p><em>Suppose we are in portrait mode, the ImageView <strong>has</strong> a drawable and ImageView is fully laid out.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">float</span> <span class="n">scaleFactor</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span><span class="n">imageView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">drawable</span><span class="o">.</span><span class="na">getIntrinsicHeight</span><span class="o">();</span>
</span><span class='line'><span class="n">mMatrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="n">scaleFactor</span><span class="o">,</span> <span class="n">scaleFactor</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; which gives us the following result: as you can see, the drawable top and bottom fit the top and bottom container.</p>

<p><img src="http://flavienlaurent.com/media/2013-08-05-make-your-background-moving-like-on-play-music-app/mybm-scale2fit.png"></p>

<h2>Step2: animate your background</h2>

<p>For this step, we&rsquo;re gonna use a powerfull concept of the Android animation framework: <a href="http://developer.android.com/reference/android/animation/ValueAnimator.html"><code>ValueAnimator</code></a>.</p>

<p><strong>Don&rsquo;t forget to read all the provided documentation about this class.</strong></p>

<p>The principle is to make your background moving on the x axis by applying some translations on the ImageView matrix.</p>

<p>Remember that all the matrix operations are <em>post</em>|<em>pre</em>concatenated. You can read a good explaination in <a href="http://stackoverflow.com/questions/3855578/android-matrix-what-is-the-different-between-preconcat-and-postconcat">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAnimator</span> <span class="o">=</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="n">mAnimator</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">value</span> <span class="o">=</span> <span class="o">(</span><span class="n">Float</span><span class="o">)</span> <span class="n">animation</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">();</span>
</span><span class='line'>      <span class="n">matrix</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>      <span class="n">matrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="n">scaleFactor</span><span class="o">,</span> <span class="n">scaleFactor</span><span class="o">);</span>
</span><span class='line'>      <span class="n">matrix</span><span class="o">.</span><span class="na">postTranslate</span><span class="o">(-</span><span class="n">value</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>      <span class="n">imageView</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="n">mAnimator</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'><span class="n">mAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is probably (<em>for sure</em>) a better way to those operations on the matrix. <a href="http://twitter.com/flavienlaurent">Please tell me how?</a></p>

<h2>Step3: where to stop and how to loop</h2>

<p>The last step consists in:</p>

<ol>
<li>stopping the animation to constantly match the real drawable bounds</li>
</ol>


<p>To do that, you&rsquo;ll need a <a href="http://developer.android.com/reference/android/graphics/RectF.html"><code>RectF</code></a> to maintain the real size and position of the background. Whenever you change the matrix, you must update the rect using the <a href="http://developer.android.com/reference/android/graphics/Matrix.html#mapRect(android.graphics.RectF"><code>mapRect(RectF rect)</code></a>) function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mDisplayRect</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">drawable</span><span class="o">.</span><span class="na">getIntrinsicWidth</span><span class="o">(),</span> <span class="n">drawable</span><span class="o">.</span><span class="na">getIntrinsicHeight</span><span class="o">());</span>
</span><span class='line'><span class="n">mMatrix</span><span class="o">.</span><span class="na">mapRect</span><span class="o">(</span><span class="n">mDisplayRect</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>reverse the animation when the translation is complete (i.e. a drawable bound is reached)</li>
</ol>


<p>This part is a piece of cake. You have to keep a variable for the current direction and to configure the ValueAnimator from/to values in order to make the right animation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">mDirection</span> <span class="o">==</span> <span class="n">RightToLeft</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">animate</span><span class="o">(</span><span class="n">mDisplayRect</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">mDisplayRect</span><span class="o">.</span><span class="na">left</span> <span class="o">-</span> <span class="o">(</span><span class="n">mDisplayRect</span><span class="o">.</span><span class="na">right</span> <span class="o">-</span> <span class="n">mImageView</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">animate</span><span class="o">(</span><span class="n">mDisplayRect</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>All together</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RightToLeft</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">LeftToRight</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DURATION</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">ValueAnimator</span> <span class="n">mCurrentAnimator</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Matrix</span> <span class="n">mMatrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Matrix</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="n">ImageView</span> <span class="n">mImageView</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">float</span> <span class="n">mScaleFactor</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">mDirection</span> <span class="o">=</span> <span class="n">RightToLeft</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">RectF</span> <span class="n">mDisplayRect</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RectF</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mImageView</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">imageView</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mImageView</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">mScaleFactor</span> <span class="o">=</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span>  <span class="n">mImageView</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">mImageView</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">().</span><span class="na">getIntrinsicHeight</span><span class="o">();</span>
</span><span class='line'>          <span class="n">mMatrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="n">mScaleFactor</span><span class="o">,</span> <span class="n">mScaleFactor</span><span class="o">);</span>
</span><span class='line'>          <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">(</span><span class="n">mMatrix</span><span class="o">);</span>
</span><span class='line'>          <span class="n">animate</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">animate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">updateDisplayRect</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">mDirection</span> <span class="o">==</span> <span class="n">RightToLeft</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">animate</span><span class="o">(</span><span class="n">mDisplayRect</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">mDisplayRect</span><span class="o">.</span><span class="na">left</span> <span class="o">-</span> <span class="o">(</span><span class="n">mDisplayRect</span><span class="o">.</span><span class="na">right</span> <span class="o">-</span> <span class="n">mImageView</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()));</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">animate</span><span class="o">(</span><span class="n">mDisplayRect</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">animate</span><span class="o">(</span><span class="kt">float</span> <span class="n">from</span><span class="o">,</span> <span class="kt">float</span> <span class="n">to</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span> <span class="o">=</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">to</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span><span class="o">.</span><span class="na">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ValueAnimator</span><span class="o">.</span><span class="na">AnimatorUpdateListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationUpdate</span><span class="o">(</span><span class="n">ValueAnimator</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">float</span> <span class="n">value</span> <span class="o">=</span> <span class="o">(</span><span class="n">Float</span><span class="o">)</span> <span class="n">animation</span><span class="o">.</span><span class="na">getAnimatedValue</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">mMatrix</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>          <span class="n">mMatrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="n">mScaleFactor</span><span class="o">,</span> <span class="n">mScaleFactor</span><span class="o">);</span>
</span><span class='line'>          <span class="n">mMatrix</span><span class="o">.</span><span class="na">postTranslate</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">(</span><span class="n">mMatrix</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="n">DURATION</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">AnimatorListenerAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationEnd</span><span class="o">(</span><span class="n">Animator</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">mDirection</span> <span class="o">==</span> <span class="n">RightToLeft</span><span class="o">)</span>
</span><span class='line'>              <span class="n">mDirection</span> <span class="o">=</span> <span class="n">LeftToRight</span><span class="o">;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="n">mDirection</span> <span class="o">=</span> <span class="n">RightToLeft</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">animate</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateDisplayRect</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mDisplayRect</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mImageView</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">().</span><span class="na">getIntrinsicWidth</span><span class="o">(),</span> <span class="n">mImageView</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">().</span><span class="na">getIntrinsicHeight</span><span class="o">());</span>
</span><span class='line'>  <span class="n">mMatrix</span><span class="o">.</span><span class="na">mapRect</span><span class="o">(</span><span class="n">mDisplayRect</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Optimizations</h1>

<p>Thanks to <a href="http://www.curious-creature.org/">Romain Guy</a> for his remarks.</p>

<p>As he said to me, we have to avoid boxing in the ValueAnimator described in the step2 (animate your background). If you don&rsquo;t know why we have to avoid boxing, you should look at those <a href="https://speakerdeck.com/cyrilmottier/optimizing-android-ui-pro-tips-for-creating-smooth-and-responsive-apps">slides</a> by <a href="http://www.cyrilmottier.com/">Cyril Mottier</a>.</p>

<p>One solution is to use an <a href="http://developer.android.com/reference/android/animation/ObjectAnimator.html"><code>ObjectAnimator</code></a> on a wrapped ImageView in order to forward changes on the real ImageView.</p>

<p>Here is a draft for this optimization</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">animate</span><span class="o">(</span><span class="kt">float</span> <span class="n">from</span><span class="o">,</span> <span class="kt">float</span> <span class="n">to</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MatrixImageView</span> <span class="n">matrixImageView</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MatrixImageView</span><span class="o">(</span><span class="n">mImageView</span><span class="o">,</span> <span class="n">mScaleFactor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span> <span class="o">=</span> <span class="n">ObjectAnimator</span><span class="o">.</span><span class="na">ofFloat</span><span class="o">(</span><span class="n">matrixImageView</span><span class="o">,</span> <span class="s">&quot;matrixTranslateX&quot;</span><span class="o">,</span> <span class="n">from</span><span class="o">,</span> <span class="n">to</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span><span class="o">.</span><span class="na">setDuration</span><span class="o">(</span><span class="n">DURATION</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">AnimatorListenerAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAnimationEnd</span><span class="o">(</span><span class="n">Animator</span> <span class="n">animation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">mDirection</span> <span class="o">==</span> <span class="n">RightToLeft</span><span class="o">)</span>
</span><span class='line'>              <span class="n">mDirection</span> <span class="o">=</span> <span class="n">LeftToRight</span><span class="o">;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="n">mDirection</span> <span class="o">=</span> <span class="n">RightToLeft</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">animate</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  <span class="n">mCurrentAnimator</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MatrixImageView</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ImageView</span> <span class="n">mImageView</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">float</span> <span class="n">mScaleFactor</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Matrix</span> <span class="n">mMatrix</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Matrix</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MatrixImageView</span><span class="o">(</span><span class="n">ImageView</span> <span class="n">imageView</span><span class="o">,</span> <span class="kt">float</span> <span class="n">scaleFactor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">mImageView</span> <span class="o">=</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">mScaleFactor</span> <span class="o">=</span> <span class="n">scaleFactor</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMatrixTranslateX</span><span class="o">(</span><span class="kt">float</span> <span class="n">dx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mMatrix</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>      <span class="n">mMatrix</span><span class="o">.</span><span class="na">postScale</span><span class="o">(</span><span class="n">mScaleFactor</span><span class="o">,</span> <span class="n">mScaleFactor</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mMatrix</span><span class="o">.</span><span class="na">postTranslate</span><span class="o">(</span><span class="n">dx</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageMatrix</span><span class="o">(</span><span class="n">mMatrix</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Secondly, another way to deal with matrix when drawing a bitmap is to create a simple View (extending View) and to implement <code>onDraw(Canvas)</code> calling <code>drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint)</code> method.</p>

<h1>Conclusion</h1>

<p>This article reflects in part the implementation of <a href="https://github.com/flavienlaurent/PanningView">PanningView</a> library available on Github. Anyway feel free to correct me if my approach sounds kind of wrong or if you see a problem somewhere.</p>
]]></content>
  </entry>
  
</feed>
